{"version":3,"file":"nivo-tree.cjs.js","sources":["../src/hooks.ts","../src/defaults.ts","../src/Node.tsx","../src/Link.tsx","../src/Label.tsx","../src/canvas.ts","../src/Links.tsx","../src/Nodes.tsx","../src/labelsHooks.ts","../src/Labels.tsx","../src/Mesh.tsx","../src/Tree.tsx","../src/TreeCanvas.tsx","../src/ResponsiveTree.tsx","../src/ResponsiveTreeCanvas.tsx"],"sourcesContent":["import { createElement, MouseEvent, useCallback, useMemo, useState } from 'react'\nimport { hierarchy as d3Hierarchy, cluster as d3Cluster, tree as d3Tree } from 'd3-hierarchy'\nimport { scaleLinear, ScaleLinear } from 'd3-scale'\nimport {\n    link as d3Link,\n    CurveFactory,\n    curveLinear,\n    curveBumpX,\n    curveBumpY,\n    curveStep,\n    curveStepBefore,\n    curveStepAfter,\n} from 'd3-shape'\nimport { Margin, usePropertyAccessor } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { TooltipAnchor, TooltipPosition, useTooltip } from '@nivo/tooltip'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport {\n    DefaultDatum,\n    HierarchyTreeNode,\n    HierarchyTreeLink,\n    TreeDataProps,\n    CommonProps,\n    Layout,\n    ComputedNode,\n    ComputedLink,\n    NodeMouseEventHandler,\n    NodeTooltip,\n    IntermediateComputedLink,\n    LinkThicknessFunction,\n    LinkMouseEventHandler,\n    LinkTooltip,\n    IntermediateComputedNode,\n    CurrentNodeSetter,\n    NodeSizeModifierFunction,\n    LinkThicknessModifierFunction,\n    TreeMode,\n    LinkCurve,\n} from './types'\nimport { commonDefaultProps } from './defaults'\n\nexport const useRoot = <Datum>({\n    data,\n    mode,\n    getIdentity,\n}: {\n    data: TreeDataProps<Datum>['data']\n    mode: TreeMode\n    getIdentity: (node: Datum) => string\n}) =>\n    useMemo(() => {\n        const root = d3Hierarchy<Datum>(data) as HierarchyTreeNode<Datum>\n        const cluster = mode === 'tree' ? d3Tree<Datum>() : d3Cluster<Datum>()\n\n        root.eachBefore(node => {\n            const ancestors = node\n                .ancestors()\n                .filter(ancestor => ancestor !== node)\n                .reverse()\n            const ancestorIds = ancestors.map(ancestor => getIdentity(ancestor.data))\n\n            node.ancestorIds = ancestorIds\n            node.uid = [...ancestorIds, getIdentity(node.data)].join('.')\n            node.ancestorUids = ancestors.map(ancestor => ancestor.uid!)\n        })\n\n        root.each(node => {\n            node.descendantUids = node\n                .descendants()\n                .filter(descendant => descendant !== node)\n                .map(descendant => descendant.uid!)\n        })\n\n        cluster(root)\n\n        return root\n    }, [data, mode, getIdentity])\n\n/**\n * By default, the x/y positions are computed for a 0~1 range,\n * so that we can easily change the layout without having to\n * recompute the nodes.\n */\nconst useCartesianScales = ({\n    width,\n    height,\n    layout,\n}: {\n    width: number\n    height: number\n    layout: Layout\n}) =>\n    useMemo(() => {\n        const xScale = scaleLinear().domain([0, 1])\n        const yScale = scaleLinear().domain([0, 1])\n\n        if (layout === 'top-to-bottom') {\n            xScale.range([0, width])\n            yScale.range([0, height])\n        } else if (layout === 'right-to-left') {\n            xScale.range([width, 0])\n            yScale.range([0, height])\n        } else if (layout === 'bottom-to-top') {\n            xScale.range([width, 0])\n            yScale.range([height, 0])\n        } else if (layout === 'left-to-right') {\n            xScale.range([0, width])\n            yScale.range([height, 0])\n        }\n\n        return {\n            xScale,\n            yScale,\n        }\n    }, [width, height, layout])\n\nconst useNodeSize = <Datum>(size: Exclude<CommonProps<Datum>['nodeSize'], undefined>) =>\n    useMemo(() => {\n        if (typeof size === 'function') return size\n        return () => size\n    }, [size])\n\nconst useNodeSizeModifier = <Datum>(size?: NodeSizeModifierFunction<Datum> | number) =>\n    useMemo(() => {\n        if (size === undefined) return (node: ComputedNode<Datum>) => node.size\n        if (typeof size === 'function') return size\n        return () => size\n    }, [size])\n\nconst useNodes = <Datum>({\n    root,\n    xScale,\n    yScale,\n    layout,\n    getIdentity,\n    nodeSize,\n    activeNodeSize,\n    inactiveNodeSize,\n    nodeColor,\n    fixNodeColorAtDepth,\n}: {\n    root: HierarchyTreeNode<Datum>\n    xScale: ScaleLinear<number, number>\n    yScale: ScaleLinear<number, number>\n    layout: Layout\n    getIdentity: (node: Datum) => string\n    nodeSize: Exclude<CommonProps<Datum>['nodeSize'], undefined>\n    activeNodeSize?: CommonProps<Datum>['activeNodeSize']\n    inactiveNodeSize?: CommonProps<Datum>['inactiveNodeSize']\n    nodeColor: Exclude<CommonProps<Datum>['nodeColor'], undefined>\n    fixNodeColorAtDepth: number\n}) => {\n    const intermediateNodes = useMemo<IntermediateComputedNode<Datum>[]>(() => {\n        return root.descendants().map(node => {\n            let x: number\n            let y: number\n            if (layout === 'top-to-bottom' || layout === 'bottom-to-top') {\n                x = xScale(node.x!)\n                y = yScale(node.y!)\n            } else {\n                x = xScale(node.y!)\n                y = yScale(node.x!)\n            }\n\n            const id = getIdentity(node.data)\n\n            return {\n                path: [...node.ancestorIds!, id],\n                uid: node.uid!,\n                isRoot: node.depth === 0,\n                isLeaf: node.height === 0,\n                ancestorIds: node.ancestorIds!,\n                ancestorUids: node.ancestorUids!,\n                descendantUids: node.descendantUids!,\n                id,\n                data: node.data,\n                depth: node.depth,\n                height: node.height,\n                x,\n                y,\n            }\n        })\n    }, [root, getIdentity, layout, xScale, yScale])\n\n    const getNodeSize = useNodeSize<Datum>(nodeSize)\n    const getActiveNodeSize = useNodeSizeModifier<Datum>(activeNodeSize)\n    const getInactiveNodeSize = useNodeSizeModifier<Datum>(inactiveNodeSize)\n\n    const getNodeColorBase = useOrdinalColorScale(nodeColor, 'uid')\n    // Wrap the default color function to support `getNodeColorAtDepth`.\n    const getNodeColor = useMemo(() => {\n        if (fixNodeColorAtDepth === Infinity) return getNodeColorBase\n\n        return (\n            node: IntermediateComputedNode<Datum>,\n            nodeByUid: Record<string, ComputedNode<Datum>>\n        ) => {\n            if (\n                node.depth <= 0 ||\n                node.depth <= fixNodeColorAtDepth ||\n                node.ancestorUids.length === 0\n            )\n                return getNodeColorBase(node)\n\n            const parentUid = node.ancestorUids[node.ancestorUids.length - 1]\n            const parent = nodeByUid[parentUid]\n            if (parent === undefined) return getNodeColorBase(node)\n\n            return parent.color\n        }\n    }, [getNodeColorBase, fixNodeColorAtDepth])\n\n    const [activeNodeUids, setActiveNodeUids] = useState<string[]>([])\n\n    const computed = useMemo(() => {\n        const nodeByUid: Record<string, ComputedNode<Datum>> = {}\n\n        const nodes: ComputedNode<Datum>[] = intermediateNodes.map(intermediateNode => {\n            const computedNode: ComputedNode<Datum> = {\n                ...intermediateNode,\n                size: getNodeSize(intermediateNode),\n                color: getNodeColor(intermediateNode, nodeByUid),\n                isActive: null,\n            }\n\n            if (activeNodeUids.length > 0) {\n                computedNode.isActive = activeNodeUids.includes(computedNode.uid)\n                if (computedNode.isActive) {\n                    computedNode.size = getActiveNodeSize(computedNode)\n                } else {\n                    computedNode.size = getInactiveNodeSize(computedNode)\n                }\n            }\n\n            nodeByUid[computedNode.uid] = computedNode\n\n            return computedNode\n        })\n\n        return { nodes, nodeByUid }\n    }, [\n        intermediateNodes,\n        getNodeSize,\n        getActiveNodeSize,\n        getInactiveNodeSize,\n        getNodeColor,\n        activeNodeUids,\n    ])\n\n    return { ...computed, activeNodeUids, setActiveNodeUids }\n}\n\nconst useLinkThicknessModifier = <Datum>(\n    thickness?: LinkThicknessModifierFunction<Datum> | number\n) =>\n    useMemo(() => {\n        if (thickness === undefined) return (link: ComputedLink<Datum>) => link.thickness\n        if (typeof thickness === 'function') return thickness\n        return () => thickness\n    }, [thickness])\n\nconst useLinks = <Datum>({\n    root,\n    nodeByUid,\n    activeNodeUids,\n    linkThickness,\n    activeLinkThickness,\n    inactiveLinkThickness,\n    linkColor,\n}: {\n    root: HierarchyTreeNode<Datum>\n    nodeByUid: Record<string, ComputedNode<Datum>>\n    activeNodeUids: readonly string[]\n    linkThickness: Exclude<CommonProps<Datum>['linkThickness'], undefined>\n    activeLinkThickness?: CommonProps<Datum>['activeLinkThickness']\n    inactiveLinkThickness?: CommonProps<Datum>['inactiveLinkThickness']\n    linkColor: Exclude<CommonProps<Datum>['linkColor'], undefined>\n}) => {\n    const intermediateLinks = useMemo<IntermediateComputedLink<Datum>[]>(() => {\n        return (root.links() as HierarchyTreeLink<Datum>[]).map(link => {\n            return {\n                id: `${link.source.uid}:${link.target.uid}`,\n                // Replace with computed nodes.\n                source: nodeByUid[link.source.uid!],\n                target: nodeByUid[link.target.uid!],\n            }\n        })\n    }, [root, nodeByUid])\n\n    const getLinkThickness: LinkThicknessFunction<Datum> = useMemo(() => {\n        if (typeof linkThickness === 'function') return linkThickness\n        return () => linkThickness\n    }, [linkThickness])\n    const getActiveLinkThickness = useLinkThicknessModifier(activeLinkThickness)\n    const getInactiveLinkThickness = useLinkThicknessModifier(inactiveLinkThickness)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    const [activeLinkIds, setActiveLinkIds] = useState<string[]>([])\n\n    const links = useMemo(() => {\n        return intermediateLinks.map(intermediateLink => {\n            const computedLink: ComputedLink<Datum> = {\n                ...intermediateLink,\n                thickness: getLinkThickness(intermediateLink),\n                color: getLinkColor(intermediateLink),\n                isActive: null,\n            }\n\n            if (activeNodeUids.length > 0) {\n                computedLink.isActive = activeLinkIds.includes(computedLink.id)\n                if (computedLink.isActive) {\n                    computedLink.thickness = getActiveLinkThickness(computedLink)\n                } else {\n                    computedLink.thickness = getInactiveLinkThickness(computedLink)\n                }\n            }\n\n            return computedLink\n        })\n    }, [\n        intermediateLinks,\n        getLinkThickness,\n        getActiveLinkThickness,\n        getInactiveLinkThickness,\n        getLinkColor,\n        activeNodeUids.length,\n        activeLinkIds,\n    ])\n\n    return {\n        links,\n        setActiveLinkIds,\n    }\n}\n\nconst useLinkGenerator = ({ layout, curve }: { layout: Layout; curve: LinkCurve }) =>\n    useMemo(() => {\n        let curveFactory: CurveFactory = curveLinear\n\n        if (curve === 'bump') {\n            if (layout === 'top-to-bottom' || layout === 'bottom-to-top') {\n                curveFactory = curveBumpY\n            } else {\n                curveFactory = curveBumpX\n            }\n        } else if (curve === 'step') {\n            curveFactory = curveStep\n        } else if (curve === 'step-before') {\n            curveFactory = curveStepBefore\n        } else if (curve === 'step-after') {\n            curveFactory = curveStepAfter\n        }\n\n        return d3Link(curveFactory)\n    }, [layout, curve])\n\nconst useSetCurrentNode = <Datum>({\n    setActiveNodeUids,\n    highlightAncestorNodes,\n    highlightDescendantNodes,\n    links,\n    setActiveLinkIds,\n    highlightAncestorLinks,\n    highlightDescendantLinks,\n}: {\n    setActiveNodeUids: (uids: string[]) => void\n    highlightAncestorNodes: boolean\n    highlightDescendantNodes: boolean\n    links: readonly ComputedLink<Datum>[]\n    setActiveLinkIds: (ids: string[]) => void\n    highlightAncestorLinks: boolean\n    highlightDescendantLinks: boolean\n}) =>\n    useCallback(\n        (node: ComputedNode<Datum> | null) => {\n            if (node === null) {\n                setActiveNodeUids([])\n                setActiveLinkIds([])\n            } else {\n                let nodeUids: string[] = [node.uid]\n                if (highlightAncestorNodes) {\n                    nodeUids = [...nodeUids, ...node.ancestorUids]\n                }\n                if (highlightDescendantNodes) {\n                    nodeUids = [...nodeUids, ...node.descendantUids]\n                }\n                setActiveNodeUids(nodeUids)\n\n                const linkIds: string[] = []\n                if (highlightAncestorLinks) {\n                    links\n                        .filter(link => {\n                            return (\n                                link.target.uid === node.uid ||\n                                node.ancestorUids.includes(link.target.uid)\n                            )\n                        })\n                        .forEach(link => {\n                            linkIds.push(link.id)\n                        })\n                }\n                if (highlightDescendantLinks) {\n                    links\n                        .filter(link => {\n                            return (\n                                link.source.uid === node.uid ||\n                                node.descendantUids.includes(link.source.uid)\n                            )\n                        })\n                        .forEach(link => {\n                            linkIds.push(link.id)\n                        })\n                }\n                setActiveLinkIds(linkIds)\n            }\n        },\n        [\n            setActiveNodeUids,\n            highlightAncestorNodes,\n            highlightDescendantNodes,\n            links,\n            setActiveLinkIds,\n            highlightAncestorLinks,\n            highlightDescendantLinks,\n        ]\n    )\n\nexport const useTree = <Datum = DefaultDatum>({\n    data,\n    width,\n    height,\n    identity = commonDefaultProps.identity,\n    mode = commonDefaultProps.mode,\n    layout = commonDefaultProps.layout,\n    nodeSize = commonDefaultProps.nodeSize,\n    activeNodeSize,\n    inactiveNodeSize,\n    nodeColor = commonDefaultProps.nodeColor,\n    fixNodeColorAtDepth = commonDefaultProps.fixNodeColorAtDepth,\n    highlightAncestorNodes = commonDefaultProps.highlightAncestorNodes,\n    highlightDescendantNodes = commonDefaultProps.highlightDescendantNodes,\n    linkCurve = commonDefaultProps.linkCurve,\n    linkThickness = commonDefaultProps.linkThickness,\n    linkColor = commonDefaultProps.linkColor,\n    activeLinkThickness,\n    inactiveLinkThickness,\n    highlightAncestorLinks = commonDefaultProps.highlightAncestorLinks,\n    highlightDescendantLinks = commonDefaultProps.highlightDescendantLinks,\n}: {\n    data: TreeDataProps<Datum>['data']\n    width: number\n    height: number\n    identity?: CommonProps<Datum>['identity']\n    mode?: TreeMode\n    layout?: Layout\n    nodeSize?: CommonProps<Datum>['nodeSize']\n    activeNodeSize?: CommonProps<Datum>['activeNodeSize']\n    inactiveNodeSize?: CommonProps<Datum>['inactiveNodeSize']\n    nodeColor?: CommonProps<Datum>['nodeColor']\n    fixNodeColorAtDepth?: number\n    highlightAncestorNodes?: boolean\n    highlightDescendantNodes?: boolean\n    linkCurve?: LinkCurve\n    linkThickness?: CommonProps<Datum>['linkThickness']\n    activeLinkThickness?: CommonProps<Datum>['activeLinkThickness']\n    inactiveLinkThickness?: CommonProps<Datum>['inactiveLinkThickness']\n    linkColor?: CommonProps<Datum>['linkColor']\n    highlightAncestorLinks?: boolean\n    highlightDescendantLinks?: boolean\n}) => {\n    const getIdentity = usePropertyAccessor(identity)\n    const root = useRoot<Datum>({ data, mode, getIdentity })\n\n    const { xScale, yScale } = useCartesianScales({ width, height, layout })\n    const { nodes, nodeByUid, activeNodeUids, setActiveNodeUids } = useNodes<Datum>({\n        root,\n        xScale,\n        yScale,\n        layout,\n        getIdentity,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        fixNodeColorAtDepth,\n    })\n\n    const linkGenerator = useLinkGenerator({ layout, curve: linkCurve })\n    const { links, setActiveLinkIds } = useLinks<Datum>({\n        root,\n        nodeByUid,\n        activeNodeUids,\n        linkThickness,\n        activeLinkThickness,\n        inactiveLinkThickness,\n        linkColor,\n    })\n\n    const setCurrentNode = useSetCurrentNode<Datum>({\n        setActiveNodeUids,\n        highlightAncestorNodes,\n        highlightDescendantNodes,\n        links,\n        setActiveLinkIds,\n        highlightAncestorLinks,\n        highlightDescendantLinks,\n    })\n\n    return {\n        nodes,\n        nodeByUid,\n        links,\n        linkGenerator,\n        setCurrentNode,\n    }\n}\n\n/**\n * This hook may generates mouse event handlers for a node according to the main chart props.\n * It's used for the default `Node` component and may be used for custom nodes\n * to simplify their implementation.\n */\nexport const useNodeMouseEventHandlers = <Datum>(\n    node: ComputedNode<Datum>,\n    {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onMouseDown,\n        onMouseUp,\n        onClick,\n        onDoubleClick,\n        setCurrentNode,\n        tooltip,\n        tooltipPosition,\n        tooltipAnchor,\n        margin,\n    }: {\n        isInteractive: boolean\n        onMouseEnter?: NodeMouseEventHandler<Datum>\n        onMouseMove?: NodeMouseEventHandler<Datum>\n        onMouseLeave?: NodeMouseEventHandler<Datum>\n        onMouseDown?: NodeMouseEventHandler<Datum>\n        onMouseUp?: NodeMouseEventHandler<Datum>\n        onClick?: NodeMouseEventHandler<Datum>\n        onDoubleClick?: NodeMouseEventHandler<Datum>\n        setCurrentNode: CurrentNodeSetter<Datum>\n        tooltip?: NodeTooltip<Datum>\n        tooltipPosition: TooltipPosition\n        tooltipAnchor: TooltipAnchor\n        margin: Margin\n    }\n) => {\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const showTooltip = useMemo(() => {\n        if (!tooltip) return undefined\n\n        if (tooltipPosition === 'fixed') {\n            return () => {\n                const { x, y } = node\n                showTooltipAt(\n                    createElement(tooltip, {\n                        node,\n                    }),\n                    [x + margin.left, y + margin.top],\n                    tooltipAnchor\n                )\n            }\n        }\n\n        return (event: MouseEvent) => {\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    node,\n                }),\n                event,\n                tooltipAnchor\n            )\n        }\n    }, [node, tooltip, showTooltipFromEvent, showTooltipAt, tooltipPosition, tooltipAnchor, margin])\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent) => {\n            setCurrentNode(node)\n            showTooltip?.(event)\n            onMouseEnter?.(node, event)\n        },\n        [node, showTooltip, setCurrentNode, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent) => {\n            showTooltip?.(event)\n            onMouseMove?.(node, event)\n        },\n        [node, showTooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent) => {\n            setCurrentNode(null)\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [node, hideTooltip, setCurrentNode, onMouseLeave]\n    )\n\n    const handleMouseDown = useCallback(\n        (event: MouseEvent) => {\n            onMouseDown?.(node, event)\n        },\n        [node, onMouseDown]\n    )\n\n    const handleMouseUp = useCallback(\n        (event: MouseEvent) => {\n            onMouseUp?.(node, event)\n        },\n        [node, onMouseUp]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent) => {\n            onClick?.(node, event)\n        },\n        [node, onClick]\n    )\n\n    const handleDoubleClick = useCallback(\n        (event: MouseEvent) => {\n            onDoubleClick?.(node, event)\n        },\n        [node, onDoubleClick]\n    )\n\n    return {\n        onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n        onMouseMove: isInteractive ? handleMouseMove : undefined,\n        onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n        onMouseDown: isInteractive ? handleMouseDown : undefined,\n        onMouseUp: isInteractive ? handleMouseUp : undefined,\n        onClick: isInteractive ? handleClick : undefined,\n        onDoubleClick: isInteractive ? handleDoubleClick : undefined,\n    }\n}\n\n/**\n * This hook may generates mouse event handlers for a node according to the main chart props.\n * It's used for the default `Node` component and may be used for custom nodes\n * to simplify their implementation.\n */\nexport const useLinkMouseEventHandlers = <Datum>(\n    link: ComputedLink<Datum>,\n    {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onMouseDown,\n        onMouseUp,\n        onClick,\n        onDoubleClick,\n        tooltip,\n        tooltipAnchor,\n    }: {\n        isInteractive: boolean\n        onMouseEnter?: LinkMouseEventHandler<Datum>\n        onMouseMove?: LinkMouseEventHandler<Datum>\n        onMouseLeave?: LinkMouseEventHandler<Datum>\n        onMouseDown?: LinkMouseEventHandler<Datum>\n        onMouseUp?: LinkMouseEventHandler<Datum>\n        onClick?: LinkMouseEventHandler<Datum>\n        onDoubleClick?: LinkMouseEventHandler<Datum>\n        tooltip?: LinkTooltip<Datum>\n        tooltipAnchor: TooltipAnchor\n    }\n) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useMemo(() => {\n        if (!tooltip) return undefined\n\n        return (event: MouseEvent) => {\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    link,\n                }),\n                event,\n                tooltipAnchor\n            )\n        }\n    }, [link, tooltip, showTooltipFromEvent, tooltipAnchor])\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent) => {\n            showTooltip?.(event)\n            onMouseEnter?.(link, event)\n        },\n        [link, showTooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent) => {\n            showTooltip?.(event)\n            onMouseMove?.(link, event)\n        },\n        [link, showTooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(link, event)\n        },\n        [link, hideTooltip, onMouseLeave]\n    )\n\n    const handleMouseDown = useCallback(\n        (event: MouseEvent) => {\n            onMouseDown?.(link, event)\n        },\n        [link, onMouseDown]\n    )\n\n    const handleMouseUp = useCallback(\n        (event: MouseEvent) => {\n            onMouseUp?.(link, event)\n        },\n        [link, onMouseUp]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent) => {\n            onClick?.(link, event)\n        },\n        [link, onClick]\n    )\n\n    const handleDoubleClick = useCallback(\n        (event: MouseEvent) => {\n            onDoubleClick?.(link, event)\n        },\n        [link, onDoubleClick]\n    )\n\n    return {\n        onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n        onMouseMove: isInteractive ? handleMouseMove : undefined,\n        onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n        onMouseDown: isInteractive ? handleMouseDown : undefined,\n        onMouseUp: isInteractive ? handleMouseUp : undefined,\n        onClick: isInteractive ? handleClick : undefined,\n        onDoubleClick: isInteractive ? handleDoubleClick : undefined,\n    }\n}\n","import { CommonProps, TreeCanvasProps, TreeSvgProps } from './types'\nimport { Node } from './Node'\nimport { Link } from './Link'\nimport { Label } from './Label'\nimport { renderNode, renderLink, renderLabel } from './canvas'\n\nexport const commonDefaultProps: Pick<\n    CommonProps<any>,\n    | 'identity'\n    | 'mode'\n    | 'layout'\n    | 'nodeSize'\n    | 'nodeColor'\n    | 'fixNodeColorAtDepth'\n    | 'linkCurve'\n    | 'linkThickness'\n    | 'linkColor'\n    | 'enableLabel'\n    | 'label'\n    | 'labelsPosition'\n    | 'orientLabel'\n    | 'labelOffset'\n    | 'isInteractive'\n    | 'useMesh'\n    | 'meshDetectionRadius'\n    | 'debugMesh'\n    | 'highlightAncestorNodes'\n    | 'highlightDescendantNodes'\n    | 'highlightAncestorLinks'\n    | 'highlightDescendantLinks'\n    | 'nodeTooltipPosition'\n    | 'nodeTooltipAnchor'\n    | 'role'\n    | 'animate'\n    | 'motionConfig'\n> = {\n    identity: 'id',\n    mode: 'dendogram',\n    layout: 'top-to-bottom',\n    nodeSize: 12,\n    nodeColor: { scheme: 'nivo' },\n    fixNodeColorAtDepth: Infinity,\n    linkCurve: 'bump',\n    linkThickness: 1,\n    linkColor: { from: 'source.color', modifiers: [['opacity', 0.4]] },\n    enableLabel: true,\n    label: 'id',\n    labelsPosition: 'outward',\n    orientLabel: true,\n    labelOffset: 6,\n    isInteractive: true,\n    useMesh: true,\n    meshDetectionRadius: Infinity,\n    debugMesh: false,\n    highlightAncestorNodes: true,\n    highlightDescendantNodes: false,\n    highlightAncestorLinks: true,\n    highlightDescendantLinks: false,\n    nodeTooltipPosition: 'fixed',\n    nodeTooltipAnchor: 'top',\n    role: 'img',\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const svgDefaultProps: typeof commonDefaultProps &\n    Required<\n        Pick<\n            TreeSvgProps<any>,\n            'layers' | 'nodeComponent' | 'linkComponent' | 'labelComponent' | 'linkTooltipAnchor'\n        >\n    > = {\n    ...commonDefaultProps,\n    layers: ['links', 'nodes', 'labels', 'mesh'],\n    nodeComponent: Node,\n    linkComponent: Link,\n    labelComponent: Label,\n    linkTooltipAnchor: 'top',\n}\n\nexport const canvasDefaultProps: typeof commonDefaultProps &\n    Required<\n        Pick<\n            TreeCanvasProps<any>,\n            'layers' | 'renderNode' | 'renderLink' | 'renderLabel' | 'pixelRatio'\n        >\n    > = {\n    ...commonDefaultProps,\n    layers: ['links', 'nodes', 'labels', 'mesh'],\n    renderNode,\n    renderLink,\n    renderLabel,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { animated } from '@react-spring/web'\nimport { NodeComponentProps } from './types'\nimport { useNodeMouseEventHandlers } from './hooks'\n\nexport const Node = <Datum,>({\n    node,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    setCurrentNode,\n    tooltip,\n    tooltipPosition,\n    tooltipAnchor,\n    margin,\n    animatedProps,\n}: NodeComponentProps<Datum>) => {\n    const eventHandlers = useNodeMouseEventHandlers<Datum>(node, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onMouseDown,\n        onMouseUp,\n        onClick,\n        onDoubleClick,\n        setCurrentNode,\n        tooltip,\n        tooltipPosition,\n        tooltipAnchor,\n        margin,\n    })\n\n    return (\n        <animated.circle\n            data-testid={`node.${node.uid}`}\n            r={animatedProps.size.to(size => size / 2)}\n            fill={animatedProps.color}\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            {...eventHandlers}\n        />\n    )\n}\n","import { animated, to } from '@react-spring/web'\nimport { LinkComponentProps } from './types'\nimport { useLinkMouseEventHandlers } from './hooks'\n\nexport const Link = <Datum,>({\n    link,\n    linkGenerator,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    tooltip,\n    tooltipAnchor,\n    animatedProps,\n}: LinkComponentProps<Datum>) => {\n    const eventHandlers = useLinkMouseEventHandlers<Datum>(link, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onMouseDown,\n        onMouseUp,\n        onClick,\n        onDoubleClick,\n        tooltip,\n        tooltipAnchor,\n    })\n\n    return (\n        <animated.path\n            data-testid={`link.${link.id}`}\n            d={to(\n                [\n                    animatedProps.sourceX,\n                    animatedProps.sourceY,\n                    animatedProps.targetX,\n                    animatedProps.targetY,\n                ],\n                (sourceX, sourceY, targetX, targetY) => {\n                    return linkGenerator({\n                        source: [sourceX, sourceY],\n                        target: [targetX, targetY],\n                    })\n                }\n            )}\n            fill=\"none\"\n            strokeWidth={animatedProps.thickness}\n            stroke={animatedProps.color}\n            {...eventHandlers}\n        />\n    )\n}\n","import { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/theming'\nimport { Text } from '@nivo/text'\nimport { LabelComponentProps } from './types'\n\nexport const Label = <Datum,>({ label, animatedProps }: LabelComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g\n            data-testid={`label.${label.id}`}\n            transform={to([animatedProps.x, animatedProps.y], (x, y) => `translate(${x},${y})`)}\n        >\n            <animated.g transform={animatedProps.rotation.to(rotation => `rotate(${rotation})`)}>\n                <Text\n                    data-testid={`label.${label.id}.label`}\n                    style={theme.labels.text}\n                    textAnchor={label.textAnchor}\n                    dominantBaseline={label.baseline}\n                >\n                    {label.label}\n                </Text>\n            </animated.g>\n        </animated.g>\n    )\n}\n","import { degreesToRadians } from '@nivo/core'\nimport { drawCanvasText } from '@nivo/text'\nimport { LinkCanvasRendererProps, NodeCanvasRendererProps, LabelCanvasRendererProps } from './types'\n\nexport const renderNode = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    { node }: NodeCanvasRendererProps<Datum>\n) => {\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fillStyle = node.color\n    ctx.fill()\n}\n\nexport const renderLink = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    { link, linkGenerator }: LinkCanvasRendererProps<Datum>\n) => {\n    ctx.strokeStyle = link.color\n    ctx.lineWidth = link.thickness\n    ctx.beginPath()\n    linkGenerator({\n        source: [link.source.x, link.source.y],\n        target: [link.target.x, link.target.y],\n    })\n    ctx.stroke()\n}\n\nexport const renderLabel = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    { label, theme }: LabelCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n\n    ctx.translate(label.x, label.y)\n    ctx.rotate(degreesToRadians(label.rotation))\n\n    ctx.textBaseline = 'middle'\n    ctx.textAlign = label.textAnchor === 'middle' ? 'center' : label.textAnchor\n    ctx.fillStyle = '#000'\n\n    drawCanvasText(ctx, theme.labels.text, label.label)\n\n    ctx.restore()\n}\n","import { createElement } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { TooltipAnchor } from '@nivo/tooltip'\nimport {\n    ComputedLink,\n    LinkComponent,\n    LinkMouseEventHandler,\n    LinkTooltip,\n    LinkAnimatedProps,\n    LinkGenerator,\n} from './types'\n\ninterface LinksProps<Datum> {\n    links: ComputedLink<Datum>[]\n    linkComponent: LinkComponent<Datum>\n    linkGenerator: LinkGenerator\n    isInteractive: boolean\n    onMouseEnter?: LinkMouseEventHandler<Datum>\n    onMouseMove?: LinkMouseEventHandler<Datum>\n    onMouseLeave?: LinkMouseEventHandler<Datum>\n    onMouseDown?: LinkMouseEventHandler<Datum>\n    onMouseUp?: LinkMouseEventHandler<Datum>\n    onClick?: LinkMouseEventHandler<Datum>\n    onDoubleClick?: LinkMouseEventHandler<Datum>\n    tooltip?: LinkTooltip<Datum>\n    tooltipAnchor: TooltipAnchor\n}\n\nconst regularTransition = <Datum,>(link: ComputedLink<Datum>): LinkAnimatedProps => ({\n    sourceX: link.source.x,\n    sourceY: link.source.y,\n    targetX: link.target.x,\n    targetY: link.target.y,\n    thickness: link.thickness,\n    color: link.color,\n})\nconst leaveTransition = <Datum,>(link: ComputedLink<Datum>): LinkAnimatedProps => ({\n    sourceX: link.source.x,\n    sourceY: link.source.y,\n    targetX: link.target.x,\n    targetY: link.target.y,\n    thickness: link.thickness,\n    color: link.color,\n})\n\nexport const Links = <Datum,>({\n    links,\n    linkComponent,\n    linkGenerator,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    tooltip,\n    tooltipAnchor,\n}: LinksProps<Datum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedLink<Datum>, LinkAnimatedProps>(links, {\n        keys: link => link.id,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((animatedProps, link) =>\n                createElement(linkComponent, {\n                    link,\n                    linkGenerator,\n                    animatedProps,\n                    isInteractive,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                    onMouseDown,\n                    onMouseUp,\n                    onClick,\n                    onDoubleClick,\n                    tooltip,\n                    tooltipAnchor,\n                })\n            )}\n        </>\n    )\n}\n","import { createElement } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { Margin, useMotionConfig } from '@nivo/core'\nimport { TooltipAnchor, TooltipPosition } from '@nivo/tooltip'\nimport {\n    ComputedNode,\n    CurrentNodeSetter,\n    NodeComponent,\n    NodeMouseEventHandler,\n    NodeTooltip,\n    NodeAnimatedProps,\n} from './types'\n\ninterface NodesProps<Datum> {\n    nodes: ComputedNode<Datum>[]\n    nodeComponent: NodeComponent<Datum>\n    isInteractive: boolean\n    onMouseEnter?: NodeMouseEventHandler<Datum>\n    onMouseMove?: NodeMouseEventHandler<Datum>\n    onMouseLeave?: NodeMouseEventHandler<Datum>\n    onMouseDown?: NodeMouseEventHandler<Datum>\n    onMouseUp?: NodeMouseEventHandler<Datum>\n    onClick?: NodeMouseEventHandler<Datum>\n    onDoubleClick?: NodeMouseEventHandler<Datum>\n    setCurrentNode: CurrentNodeSetter<Datum>\n    tooltip?: NodeTooltip<Datum>\n    tooltipPosition: TooltipPosition\n    tooltipAnchor: TooltipAnchor\n    margin: Margin\n}\n\nconst regularTransition = <Datum,>(node: ComputedNode<Datum>): NodeAnimatedProps => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <Datum,>(node: ComputedNode<Datum>): NodeAnimatedProps => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <Datum,>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    setCurrentNode,\n    tooltip,\n    tooltipPosition,\n    tooltipAnchor,\n    margin,\n}: NodesProps<Datum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedNode<Datum>, NodeAnimatedProps>(nodes, {\n        keys: node => node.uid,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((animatedProps, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    isInteractive,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                    onMouseDown,\n                    onMouseUp,\n                    onClick,\n                    onDoubleClick,\n                    setCurrentNode,\n                    tooltip,\n                    tooltipPosition,\n                    tooltipAnchor,\n                    margin,\n                    animatedProps,\n                })\n            )}\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport {\n    CommonProps,\n    Layout,\n    ComputedNode,\n    ComputedLabel,\n    LabelsPosition,\n    LabelTextAnchor,\n    LabelBaseline,\n} from './types'\n\ninterface LabelPositionResult {\n    x: number\n    y: number\n    rotation: number\n    textAnchor: LabelTextAnchor\n    baseline: LabelBaseline\n}\n\ntype GetLabelPosition<Datum> = (node: ComputedNode<Datum>) => LabelPositionResult\n\ninterface LabelPositionFactoryProps {\n    orient: boolean\n    offset: number\n}\n\nconst horizontalLabelBefore = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x - offset,\n    y: y,\n    rotation: 0,\n    textAnchor: 'end',\n    baseline: 'middle',\n})\n\nconst horizontalLabelAfter = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x + offset,\n    y: y,\n    rotation: 0,\n    textAnchor: 'start',\n    baseline: 'middle',\n})\n\nconst verticalLabelBefore = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x,\n    y: y - offset,\n    rotation: 0,\n    textAnchor: 'middle',\n    baseline: 'auto',\n})\n\nconst verticalLabelBeforeOriented = (\n    x: number,\n    y: number,\n    offset: number\n): LabelPositionResult => ({\n    x: x,\n    y: y - offset,\n    rotation: -90,\n    textAnchor: 'start',\n    baseline: 'middle',\n})\n\nconst verticalLabelAfter = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x,\n    y: y + offset,\n    rotation: 0,\n    textAnchor: 'middle',\n    baseline: 'hanging',\n})\n\nconst verticalLabelAfterOriented = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x,\n    y: y + offset,\n    rotation: -90,\n    textAnchor: 'end',\n    baseline: 'middle',\n})\n\nconst verticalLeavesBeforeOthersAfter =\n    <Datum>({ orient, offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (node.isLeaf) {\n            if (orient) return verticalLabelBeforeOriented(node.x, node.y, spacing)\n            else return verticalLabelBefore(node.x, node.y, spacing)\n        } else {\n            if (orient) return verticalLabelAfterOriented(node.x, node.y, spacing)\n            else return verticalLabelAfter(node.x, node.y, spacing)\n        }\n    }\n\nconst verticalLeavesAfterOthersBefore =\n    <Datum>({ orient, offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (node.isLeaf) {\n            if (orient) return verticalLabelAfterOriented(node.x, node.y, spacing)\n            else return verticalLabelAfter(node.x, node.y, spacing)\n        } else {\n            if (orient) return verticalLabelBeforeOriented(node.x, node.y, spacing)\n            else return verticalLabelBefore(node.x, node.y, spacing)\n        }\n    }\n\nconst verticalAllBefore =\n    <Datum>({ orient, offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (orient) return verticalLabelBeforeOriented(node.x, node.y, spacing)\n        else return verticalLabelBefore(node.x, node.y, spacing)\n    }\n\nconst verticalAllAfter =\n    <Datum>({ orient, offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (orient) return verticalLabelAfterOriented(node.x, node.y, spacing)\n        else return verticalLabelAfter(node.x, node.y, spacing)\n    }\n\nconst horizontalLeavesBeforeOthersAfter =\n    <Datum>({ offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (node.isLeaf) return horizontalLabelBefore(node.x, node.y, spacing)\n        else return horizontalLabelAfter(node.x, node.y, spacing)\n    }\n\nconst horizontalLeavesAfterOthersBefore =\n    <Datum>({ offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (node.isLeaf) return horizontalLabelAfter(node.x, node.y, spacing)\n        return horizontalLabelBefore(node.x, node.y, spacing)\n    }\n\nconst horizontalAllBefore =\n    <Datum>({ offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        return horizontalLabelBefore(node.x, node.y, node.size / 2 + offset)\n    }\n\nconst horizontalAllAfter =\n    <Datum>({ offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        return horizontalLabelAfter(node.x, node.y, node.size / 2 + offset)\n    }\n\nconst useGetLabelPosition = <Datum>({\n    layout,\n    labelsPosition,\n    orientLabel,\n    labelOffset,\n}: {\n    layout: Layout\n    labelsPosition: LabelsPosition\n    orientLabel: boolean\n    labelOffset: number\n}) =>\n    useMemo(() => {\n        const options: LabelPositionFactoryProps = {\n            orient: orientLabel,\n            offset: labelOffset,\n        }\n\n        if (layout === 'top-to-bottom') {\n            if (labelsPosition === 'outward') {\n                return verticalLeavesAfterOthersBefore<Datum>(options)\n            } else if (labelsPosition === 'inward') {\n                return verticalLeavesBeforeOthersAfter<Datum>(options)\n            } else if (labelsPosition === 'layout') {\n                return verticalAllAfter<Datum>(options)\n            } else if (labelsPosition === 'layout-opposite') {\n                return verticalAllBefore<Datum>(options)\n            }\n        }\n\n        if (layout === 'bottom-to-top') {\n            if (labelsPosition === 'outward') {\n                return verticalLeavesBeforeOthersAfter<Datum>(options)\n            } else if (labelsPosition === 'inward') {\n                return verticalLeavesAfterOthersBefore<Datum>(options)\n            } else if (labelsPosition === 'layout') {\n                return verticalAllBefore<Datum>(options)\n            } else if (labelsPosition === 'layout-opposite') {\n                return verticalAllAfter<Datum>(options)\n            }\n        }\n\n        if (layout === 'right-to-left') {\n            if (labelsPosition === 'outward') {\n                return horizontalLeavesBeforeOthersAfter<Datum>(options)\n            } else if (labelsPosition === 'inward') {\n                return horizontalLeavesAfterOthersBefore<Datum>(options)\n            } else if (labelsPosition === 'layout') {\n                return horizontalAllBefore<Datum>(options)\n            } else if (labelsPosition === 'layout-opposite') {\n                return horizontalAllAfter<Datum>(options)\n            }\n        }\n\n        if (layout === 'left-to-right') {\n            if (labelsPosition === 'outward') {\n                return horizontalLeavesAfterOthersBefore<Datum>(options)\n            } else if (labelsPosition === 'inward') {\n                return horizontalLeavesBeforeOthersAfter<Datum>(options)\n            } else if (labelsPosition === 'layout') {\n                return horizontalAllAfter<Datum>(options)\n            } else if (labelsPosition === 'layout-opposite') {\n                return horizontalAllBefore<Datum>(options)\n            }\n        }\n    }, [layout, labelsPosition, orientLabel, labelOffset])\n\nexport const useLabels = <Datum>({\n    nodes,\n    label,\n    layout,\n    labelsPosition,\n    orientLabel,\n    labelOffset,\n}: {\n    nodes: readonly ComputedNode<Datum>[]\n    label: Exclude<CommonProps<Datum>['label'], undefined>\n    layout: Layout\n    labelsPosition: LabelsPosition\n    orientLabel: boolean\n    labelOffset: number\n}) => {\n    const getLabel = usePropertyAccessor(label)\n    const getPosition = useGetLabelPosition<Datum>({\n        layout,\n        labelsPosition,\n        orientLabel,\n        labelOffset,\n    })\n\n    if (getPosition === undefined) {\n        throw new Error('Unable to determine the logic to compute labels position')\n    }\n\n    return useMemo(\n        () =>\n            nodes.map(\n                node =>\n                    ({\n                        id: node.uid,\n                        node: node,\n                        label: getLabel(node),\n                        ...getPosition(node),\n                    }) as ComputedLabel<Datum>\n            ),\n        [nodes, getLabel, getPosition]\n    )\n}\n","import { createElement } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport {\n    CommonProps,\n    ComputedLabel,\n    ComputedNode,\n    LabelAnimatedProps,\n    LabelComponent,\n    LabelsPosition,\n    Layout,\n} from './types'\nimport { useLabels } from './labelsHooks'\n\ninterface LabelsProps<Datum> {\n    nodes: readonly ComputedNode<Datum>[]\n    label: Exclude<CommonProps<Datum>['label'], undefined>\n    layout: Layout\n    labelsPosition: LabelsPosition\n    orientLabel: boolean\n    labelOffset: number\n    labelComponent: LabelComponent<Datum>\n}\n\nconst regularTransition = <Datum,>(label: ComputedLabel<Datum>): LabelAnimatedProps => ({\n    x: label.x,\n    y: label.y,\n    rotation: label.rotation,\n})\nconst leaveTransition = <Datum,>(label: ComputedLabel<Datum>): LabelAnimatedProps => ({\n    x: label.x,\n    y: label.y,\n    rotation: label.rotation,\n})\n\nexport const Labels = <Datum,>({\n    nodes,\n    label,\n    layout,\n    labelsPosition,\n    orientLabel,\n    labelOffset,\n    labelComponent,\n}: LabelsProps<Datum>) => {\n    const labels = useLabels({ nodes, label, layout, labelsPosition, orientLabel, labelOffset })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedLabel<Datum>, LabelAnimatedProps>(labels, {\n        keys: label => label.id,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <g\n            style={{\n                pointerEvents: 'none',\n            }}\n        >\n            {transition((animatedProps, label) =>\n                createElement(labelComponent, {\n                    label,\n                    animatedProps,\n                })\n            )}\n        </g>\n    )\n}\n","import { useMemo } from 'react'\nimport { createElement, memo } from 'react'\nimport { Margin } from '@nivo/core'\nimport { TooltipAnchor, TooltipPosition } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ComputedNode, CurrentNodeSetter, NodeMouseEventHandler, NodeTooltip } from './types'\n\ninterface MeshProps<Datum> {\n    nodes: ComputedNode<Datum>[]\n    width: number\n    height: number\n    margin: Margin\n    onMouseEnter?: NodeMouseEventHandler<Datum>\n    onMouseMove?: NodeMouseEventHandler<Datum>\n    onMouseLeave?: NodeMouseEventHandler<Datum>\n    onMouseDown?: NodeMouseEventHandler<Datum>\n    onMouseUp?: NodeMouseEventHandler<Datum>\n    onClick?: NodeMouseEventHandler<Datum>\n    onDoubleClick?: NodeMouseEventHandler<Datum>\n    setCurrentNode: CurrentNodeSetter<Datum>\n    tooltip?: NodeTooltip<Datum>\n    tooltipPosition?: TooltipPosition\n    tooltipAnchor?: TooltipAnchor\n    detectionRadius: number\n    debug: boolean\n}\n\nconst NonMemoizedMesh = <Datum,>({\n    nodes,\n    width,\n    height,\n    margin,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    setCurrentNode,\n    tooltip,\n    tooltipPosition,\n    tooltipAnchor,\n    detectionRadius,\n    debug,\n}: MeshProps<Datum>) => {\n    const renderTooltip = useMemo(() => {\n        if (!tooltip) return undefined\n        return (node: ComputedNode<Datum>) => createElement(tooltip, { node })\n    }, [tooltip])\n\n    /*\n    const handleMouseEnter = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            setCurrentNode(node)\n            if (tooltip !== undefined) {\n                showTooltipAt(\n                    createElement(tooltip, { node }),\n                    [node.x + margin.left, node.y ?? 0 + margin.top],\n                    'top'\n                )\n            }\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipAt, tooltip, margin.left, margin.top, setCurrentNode, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            setCurrentNode(node)\n            if (tooltip !== undefined) {\n                showTooltipAt(\n                    createElement(tooltip, { node }),\n                    [node.x + margin.left, node.y ?? 0 + margin.top],\n                    'top'\n                )\n            }\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipAt, tooltip, margin.left, margin.top, setCurrentNode, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            setCurrentNode(null)\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n    */\n\n    return (\n        <BaseMesh<ComputedNode<Datum>>\n            nodes={nodes}\n            width={width}\n            height={height}\n            margin={margin}\n            detectionRadius={detectionRadius}\n            setCurrent={setCurrentNode}\n            onMouseEnter={onMouseEnter}\n            onMouseMove={onMouseMove}\n            onMouseLeave={onMouseLeave}\n            onMouseDown={onMouseDown}\n            onMouseUp={onMouseUp}\n            onClick={onClick}\n            onDoubleClick={onDoubleClick}\n            tooltip={renderTooltip}\n            tooltipPosition={tooltipPosition}\n            tooltipAnchor={tooltipAnchor}\n            debug={debug}\n        />\n    )\n}\n\nexport const Mesh = memo(NonMemoizedMesh) as typeof NonMemoizedMesh\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { DefaultDatum, LayerId, TreeSvgProps, CustomSvgLayerProps } from './types'\nimport { svgDefaultProps } from './defaults'\nimport { useTree } from './hooks'\nimport { Links } from './Links'\nimport { Nodes } from './Nodes'\nimport { Labels } from './Labels'\nimport { Mesh } from './Mesh'\n\ntype InnerTreeProps<Datum> = Omit<\n    TreeSvgProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTree = <Datum,>({\n    width,\n    height,\n    margin: partialMargin,\n    data,\n    identity,\n    mode = svgDefaultProps.mode,\n    layout = svgDefaultProps.layout,\n    nodeSize = svgDefaultProps.nodeSize,\n    activeNodeSize,\n    inactiveNodeSize,\n    nodeColor = svgDefaultProps.nodeColor,\n    fixNodeColorAtDepth = svgDefaultProps.fixNodeColorAtDepth,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    linkCurve = svgDefaultProps.linkCurve,\n    linkThickness = svgDefaultProps.linkThickness,\n    activeLinkThickness,\n    inactiveLinkThickness,\n    linkColor = svgDefaultProps.linkColor,\n    linkComponent = svgDefaultProps.linkComponent,\n    enableLabel = svgDefaultProps.enableLabel,\n    label = svgDefaultProps.label,\n    labelsPosition = svgDefaultProps.labelsPosition,\n    orientLabel = svgDefaultProps.orientLabel,\n    labelOffset = svgDefaultProps.labelOffset,\n    labelComponent = svgDefaultProps.labelComponent,\n    layers = svgDefaultProps.layers,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    meshDetectionRadius = svgDefaultProps.meshDetectionRadius,\n    debugMesh = svgDefaultProps.debugMesh,\n    highlightAncestorNodes = svgDefaultProps.highlightAncestorNodes,\n    highlightDescendantNodes = svgDefaultProps.highlightDescendantNodes,\n    highlightAncestorLinks = svgDefaultProps.highlightAncestorLinks,\n    highlightDescendantLinks = svgDefaultProps.highlightDescendantLinks,\n    onNodeMouseEnter,\n    onNodeMouseMove,\n    onNodeMouseLeave,\n    onNodeMouseDown,\n    onNodeMouseUp,\n    onNodeClick,\n    onNodeDoubleClick,\n    nodeTooltip,\n    nodeTooltipPosition = svgDefaultProps.nodeTooltipPosition,\n    nodeTooltipAnchor = svgDefaultProps.nodeTooltipAnchor,\n    onLinkMouseEnter,\n    onLinkMouseMove,\n    onLinkMouseLeave,\n    onLinkMouseDown,\n    onLinkMouseUp,\n    onLinkClick,\n    onLinkDoubleClick,\n    linkTooltip,\n    linkTooltipAnchor = svgDefaultProps.linkTooltipAnchor,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeProps<Datum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, nodeByUid, links, linkGenerator, setCurrentNode } = useTree<Datum>({\n        data,\n        identity,\n        layout,\n        mode,\n        width: innerWidth,\n        height: innerHeight,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        fixNodeColorAtDepth,\n        highlightAncestorNodes,\n        highlightDescendantNodes,\n        linkCurve,\n        linkThickness,\n        activeLinkThickness,\n        inactiveLinkThickness,\n        linkColor,\n        highlightAncestorLinks,\n        highlightDescendantLinks,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        links: null,\n        nodes: null,\n        labels: null,\n        mesh: null,\n    }\n\n    if (layers.includes('links')) {\n        layerById.links = (\n            <Links<Datum>\n                key=\"links\"\n                links={links}\n                linkComponent={linkComponent}\n                linkGenerator={linkGenerator}\n                isInteractive={isInteractive}\n                onMouseEnter={onLinkMouseEnter}\n                onMouseMove={onLinkMouseMove}\n                onMouseLeave={onLinkMouseLeave}\n                onMouseDown={onLinkMouseDown}\n                onMouseUp={onLinkMouseUp}\n                onClick={onLinkClick}\n                onDoubleClick={onLinkDoubleClick}\n                tooltip={linkTooltip}\n                tooltipAnchor={linkTooltipAnchor}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                onMouseEnter={onNodeMouseEnter}\n                onMouseMove={onNodeMouseMove}\n                onMouseLeave={onNodeMouseLeave}\n                onMouseDown={onNodeMouseDown}\n                onMouseUp={onNodeMouseUp}\n                onClick={onNodeClick}\n                onDoubleClick={onNodeDoubleClick}\n                setCurrentNode={setCurrentNode}\n                tooltip={nodeTooltip}\n                tooltipPosition={nodeTooltipPosition}\n                tooltipAnchor={nodeTooltipAnchor}\n                margin={margin}\n            />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabel) {\n        layerById.labels = (\n            <Labels<Datum>\n                key=\"labels\"\n                label={label}\n                nodes={nodes}\n                layout={layout}\n                labelsPosition={labelsPosition}\n                orientLabel={orientLabel}\n                labelOffset={labelOffset}\n                labelComponent={labelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<Datum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                detectionRadius={meshDetectionRadius}\n                debug={debugMesh}\n                onMouseEnter={onNodeMouseEnter}\n                onMouseMove={onNodeMouseMove}\n                onMouseLeave={onNodeMouseLeave}\n                onMouseDown={onNodeMouseDown}\n                onMouseUp={onNodeMouseUp}\n                onClick={onNodeClick}\n                onDoubleClick={onNodeDoubleClick}\n                tooltip={nodeTooltip}\n                tooltipPosition={nodeTooltipPosition}\n                tooltipAnchor={nodeTooltipAnchor}\n                setCurrentNode={setCurrentNode}\n            />\n        )\n    }\n\n    const customLayerProps: CustomSvgLayerProps<Datum> = useMemo(\n        () => ({\n            nodes,\n            nodeByUid,\n            links,\n            innerWidth,\n            innerHeight,\n            linkGenerator,\n            setCurrentNode,\n        }),\n        [nodes, nodeByUid, links, innerWidth, innerHeight, linkGenerator, setCurrentNode]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Tree = <Datum = DefaultDatum,>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeSvgProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTree<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { useEffect, useMemo, useRef, createElement } from 'react'\nimport { Container, useDimensions } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { setCanvasFont } from '@nivo/text'\nimport { useMesh, renderDebugToCanvas } from '@nivo/voronoi'\nimport { DefaultDatum, TreeCanvasProps, CustomCanvasLayerProps, ComputedNode } from './types'\nimport { canvasDefaultProps } from './defaults'\nimport { useTree } from './hooks'\nimport { useLabels } from './labelsHooks'\n\ntype InnerTreeCanvasProps<Datum> = Omit<\n    TreeCanvasProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeCanvas = <Datum,>({\n    width,\n    height,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    margin: partialMargin,\n    data,\n    identity,\n    mode = canvasDefaultProps.mode,\n    layout = canvasDefaultProps.layout,\n    nodeSize = canvasDefaultProps.nodeSize,\n    activeNodeSize,\n    inactiveNodeSize,\n    nodeColor = canvasDefaultProps.nodeColor,\n    fixNodeColorAtDepth = canvasDefaultProps.fixNodeColorAtDepth,\n    renderNode = canvasDefaultProps.renderNode,\n    linkCurve = canvasDefaultProps.linkCurve,\n    linkThickness = canvasDefaultProps.linkThickness,\n    activeLinkThickness,\n    inactiveLinkThickness,\n    linkColor = canvasDefaultProps.linkColor,\n    renderLink = canvasDefaultProps.renderLink,\n    enableLabel = canvasDefaultProps.enableLabel,\n    label = canvasDefaultProps.label,\n    labelsPosition = canvasDefaultProps.labelsPosition,\n    orientLabel = canvasDefaultProps.orientLabel,\n    labelOffset = canvasDefaultProps.labelOffset,\n    renderLabel = canvasDefaultProps.renderLabel,\n    layers = canvasDefaultProps.layers,\n    isInteractive = canvasDefaultProps.isInteractive,\n    meshDetectionRadius = canvasDefaultProps.meshDetectionRadius,\n    debugMesh = canvasDefaultProps.debugMesh,\n    highlightAncestorNodes = canvasDefaultProps.highlightAncestorNodes,\n    highlightDescendantNodes = canvasDefaultProps.highlightDescendantNodes,\n    highlightAncestorLinks = canvasDefaultProps.highlightAncestorLinks,\n    highlightDescendantLinks = canvasDefaultProps.highlightDescendantLinks,\n    onNodeMouseEnter,\n    onNodeMouseMove,\n    onNodeMouseLeave,\n    onNodeMouseDown,\n    onNodeMouseUp,\n    onNodeClick,\n    onNodeDoubleClick,\n    nodeTooltip,\n    nodeTooltipPosition = canvasDefaultProps.nodeTooltipPosition,\n    nodeTooltipAnchor = canvasDefaultProps.nodeTooltipAnchor,\n    role = canvasDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeCanvasProps<Datum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const theme = useTheme()\n\n    const { nodes, nodeByUid, links, linkGenerator, setCurrentNode } = useTree<Datum>({\n        data,\n        identity,\n        layout,\n        mode,\n        width: innerWidth,\n        height: innerHeight,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        fixNodeColorAtDepth,\n        highlightAncestorNodes,\n        highlightDescendantNodes,\n        linkCurve,\n        linkThickness,\n        activeLinkThickness,\n        inactiveLinkThickness,\n        linkColor,\n        highlightAncestorLinks,\n        highlightDescendantLinks,\n    })\n\n    const labels = useLabels<Datum>({\n        nodes,\n        label,\n        layout,\n        labelsPosition,\n        orientLabel,\n        labelOffset,\n    })\n\n    const renderTooltip = useMemo(() => {\n        if (!nodeTooltip) return undefined\n        return (node: ComputedNode<Datum>) => createElement(nodeTooltip, { node })\n    }, [nodeTooltip])\n\n    const {\n        delaunay,\n        voronoi,\n        handleMouseEnter,\n        handleMouseMove,\n        handleMouseLeave,\n        handleMouseDown,\n        handleMouseUp,\n        handleClick,\n        handleDoubleClick,\n        current,\n    } = useMesh<ComputedNode<Datum>, HTMLCanvasElement>({\n        elementRef: canvasEl,\n        nodes,\n        width: innerWidth,\n        height: innerHeight,\n        margin,\n        detectionRadius: meshDetectionRadius,\n        isInteractive,\n        setCurrent: setCurrentNode,\n        onMouseEnter: onNodeMouseEnter,\n        onMouseMove: onNodeMouseMove,\n        onMouseLeave: onNodeMouseLeave,\n        onMouseDown: onNodeMouseDown,\n        onMouseUp: onNodeMouseUp,\n        onClick: onNodeClick,\n        onDoubleClick: onNodeDoubleClick,\n        tooltip: renderTooltip,\n        tooltipPosition: nodeTooltipPosition,\n        tooltipAnchor: nodeTooltipAnchor,\n        debug: debugMesh,\n    })\n\n    const customLayerProps: CustomCanvasLayerProps<Datum> = useMemo(\n        () => ({\n            nodes,\n            nodeByUid,\n            links,\n            innerWidth,\n            innerHeight,\n            linkGenerator,\n        }),\n        [nodes, nodeByUid, links, innerWidth, innerHeight, linkGenerator]\n    )\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'links') {\n                linkGenerator.context(ctx)\n\n                links.forEach(link => {\n                    renderLink(ctx, { link, linkGenerator })\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, { node })\n                })\n            } else if (layer === 'labels' && enableLabel) {\n                setCanvasFont(ctx, theme.labels.text)\n\n                labels.forEach(label => {\n                    renderLabel(ctx, { label, theme })\n                })\n            } else if (layer === 'mesh' && debugMesh && voronoi) {\n                ctx.save()\n                // The mesh should cover the whole chart, including margins.\n                ctx.translate(-margin.left, -margin.top)\n\n                renderDebugToCanvas(ctx, {\n                    delaunay,\n                    voronoi,\n                    detectionRadius: meshDetectionRadius,\n                    index: current !== null ? current[0] : null,\n                })\n\n                ctx.restore()\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        pixelRatio,\n        margin.left,\n        margin.top,\n        theme,\n        layers,\n        nodes,\n        nodeByUid,\n        renderNode,\n        links,\n        renderLink,\n        linkGenerator,\n        labels,\n        enableLabel,\n        renderLabel,\n        delaunay,\n        voronoi,\n        meshDetectionRadius,\n        debugMesh,\n        current,\n        customLayerProps,\n    ])\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n            onClick={handleClick}\n            onDoubleClick={handleDoubleClick}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const TreeCanvas = <Datum = DefaultDatum,>({\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeCanvasProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeCanvas<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ResponsiveTreeSvgProps, DefaultDatum } from './types'\nimport { Tree } from './Tree'\n\nexport const ResponsiveTree = <Datum = DefaultDatum,>(props: ResponsiveTreeSvgProps<Datum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Tree<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ResponsiveTreeCanvasProps, DefaultDatum } from './types'\nimport { TreeCanvas } from './TreeCanvas'\n\nexport const ResponsiveTreeCanvas = <Datum = DefaultDatum,>(\n    props: ResponsiveTreeCanvasProps<Datum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeCanvas<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["useRoot","_ref","data","mode","getIdentity","useMemo","root","d3Hierarchy","cluster","d3Tree","d3Cluster","eachBefore","node","ancestors","filter","ancestor","reverse","ancestorIds","map","uid","concat","join","ancestorUids","each","descendantUids","descendants","descendant","useNodeSizeModifier","size","undefined","useNodes","_ref3","xScale","yScale","layout","nodeSize","activeNodeSize","inactiveNodeSize","nodeColor","fixNodeColorAtDepth","intermediateNodes","x","y","id","path","isRoot","depth","isLeaf","height","getNodeSize","getActiveNodeSize","getInactiveNodeSize","getNodeColorBase","useOrdinalColorScale","getNodeColor","Infinity","nodeByUid","length","parent","color","_useState","useState","activeNodeUids","setActiveNodeUids","computed","nodes","intermediateNode","computedNode","_extends","isActive","includes","useLinkThicknessModifier","thickness","link","useTree","_ref7","width","_ref7$identity","identity","commonDefaultProps","_ref7$mode","_ref7$layout","_ref7$nodeSize","_ref7$nodeColor","_ref7$fixNodeColorAtD","_ref7$highlightAncest","highlightAncestorNodes","_ref7$highlightDescen","highlightDescendantNodes","_ref7$linkCurve","linkCurve","_ref7$linkThickness","linkThickness","_ref7$linkColor","linkColor","activeLinkThickness","inactiveLinkThickness","_ref7$highlightAncest2","highlightAncestorLinks","_ref7$highlightDescen2","highlightDescendantLinks","usePropertyAccessor","_useCartesianScales","_ref2","scaleLinear","domain","range","useCartesianScales","_useNodes","linkGenerator","_ref5","curve","curveFactory","curveLinear","curveBumpY","curveBumpX","curveStep","curveStepBefore","curveStepAfter","d3Link","useLinkGenerator","_useLinks","_ref4","intermediateLinks","links","source","target","getLinkThickness","getActiveLinkThickness","getInactiveLinkThickness","theme","useTheme","getLinkColor","useInheritedColor","_useState2","activeLinkIds","setActiveLinkIds","intermediateLink","computedLink","useLinks","setCurrentNode","_ref6","useCallback","nodeUids","linkIds","forEach","push","useSetCurrentNode","useNodeMouseEventHandlers","_ref8","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onMouseDown","onMouseUp","onClick","onDoubleClick","tooltip","tooltipPosition","tooltipAnchor","margin","_useTooltip","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","showTooltip","createElement","left","top","event","handleMouseEnter","handleMouseMove","handleMouseLeave","handleMouseDown","handleMouseUp","handleClick","handleDoubleClick","useLinkMouseEventHandlers","_ref9","_useTooltip2","scheme","from","modifiers","enableLabel","label","labelsPosition","orientLabel","labelOffset","useMesh","meshDetectionRadius","debugMesh","nodeTooltipPosition","nodeTooltipAnchor","role","animate","motionConfig","svgDefaultProps","layers","nodeComponent","animatedProps","eventHandlers","_jsx","animated","circle","r","to","fill","cx","cy","linkComponent","d","sourceX","sourceY","targetX","targetY","strokeWidth","stroke","labelComponent","jsx","g","transform","children","rotation","Text","style","labels","text","textAnchor","dominantBaseline","baseline","linkTooltipAnchor","canvasDefaultProps","renderNode","ctx","beginPath","arc","Math","PI","fillStyle","renderLink","strokeStyle","lineWidth","renderLabel","save","translate","rotate","degreesToRadians","textBaseline","textAlign","drawCanvasText","restore","pixelRatio","window","devicePixelRatio","regularTransition","leaveTransition","Links","_useMotionConfig","useMotionConfig","springConfig","config","transition","useTransition","keys","enter","update","leave","immediate","_Fragment","Nodes","horizontalLabelBefore","offset","horizontalLabelAfter","verticalLabelBefore","verticalLabelBeforeOriented","verticalLabelAfter","verticalLabelAfterOriented","verticalLeavesBeforeOthersAfter","orient","spacing","verticalLeavesAfterOthersBefore","verticalAllBefore","verticalAllAfter","horizontalLeavesBeforeOthersAfter","horizontalLeavesAfterOthersBefore","horizontalAllBefore","horizontalAllAfter","useLabels","_ref10","getLabel","getPosition","options","useGetLabelPosition","Error","Labels","pointerEvents","Mesh","memo","detectionRadius","debug","renderTooltip","BaseMesh","setCurrent","InnerTree","partialMargin","_ref$mode","_ref$layout","_ref$nodeSize","_ref$nodeColor","_ref$fixNodeColorAtDe","_ref$nodeComponent","_ref$linkCurve","_ref$linkThickness","_ref$linkColor","_ref$linkComponent","_ref$enableLabel","_ref$label","_ref$labelsPosition","_ref$orientLabel","_ref$labelOffset","_ref$labelComponent","_ref$layers","_ref$isInteractive","_ref$useMesh","_ref$meshDetectionRad","_ref$debugMesh","_ref$highlightAncesto","_ref$highlightDescend","_ref$highlightAncesto2","_ref$highlightDescend2","onNodeMouseEnter","onNodeMouseMove","onNodeMouseLeave","onNodeMouseDown","onNodeMouseUp","onNodeClick","onNodeDoubleClick","nodeTooltip","_ref$nodeTooltipPosit","_ref$nodeTooltipAncho","onLinkMouseEnter","onLinkMouseMove","onLinkMouseLeave","onLinkMouseDown","onLinkMouseUp","onLinkClick","onLinkDoubleClick","linkTooltip","_ref$linkTooltipAncho","_ref$role","ariaLabel","ariaLabelledBy","ariaDescribedBy","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useTree","layerById","mesh","customLayerProps","SvgWrapper","layer","i","_layerById$layer","Fragment","Tree","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","InnerTreeCanvas","_ref$pixelRatio","_ref$renderNode","_ref$renderLink","_ref$renderLabel","canvasEl","useRef","_useMesh","elementRef","delaunay","voronoi","current","useEffect","getContext","scale","background","fillRect","context","setCanvasFont","renderDebugToCanvas","index","ref","cursor","TreeCanvas","props","ResponsiveWrapper"],"mappings":"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"}