import { MouseEvent } from 'react';
import { Margin } from '@nivo/core';
import { TooltipAnchor, TooltipPosition } from '@nivo/tooltip';
import { DefaultDatum, HierarchyTreeNode, TreeDataProps, CommonProps, Layout, ComputedNode, ComputedLink, NodeMouseEventHandler, NodeTooltip, LinkMouseEventHandler, LinkTooltip, CurrentNodeSetter, TreeMode, LinkCurve } from './types';
export declare const useRoot: <Datum>({ data, mode, getIdentity, }: {
    data: TreeDataProps<Datum>["data"];
    mode: TreeMode;
    getIdentity: (node: Datum) => string;
}) => HierarchyTreeNode<Datum>;
export declare const useTree: <Datum = DefaultDatum>({ data, width, height, identity, mode, layout, nodeSize, activeNodeSize, inactiveNodeSize, nodeColor, fixNodeColorAtDepth, highlightAncestorNodes, highlightDescendantNodes, linkCurve, linkThickness, linkColor, activeLinkThickness, inactiveLinkThickness, highlightAncestorLinks, highlightDescendantLinks, }: {
    data: TreeDataProps<Datum>["data"];
    width: number;
    height: number;
    identity?: CommonProps<Datum>["identity"];
    mode?: TreeMode;
    layout?: Layout;
    nodeSize?: CommonProps<Datum>["nodeSize"];
    activeNodeSize?: CommonProps<Datum>["activeNodeSize"];
    inactiveNodeSize?: CommonProps<Datum>["inactiveNodeSize"];
    nodeColor?: CommonProps<Datum>["nodeColor"];
    fixNodeColorAtDepth?: number;
    highlightAncestorNodes?: boolean;
    highlightDescendantNodes?: boolean;
    linkCurve?: LinkCurve;
    linkThickness?: CommonProps<Datum>["linkThickness"];
    activeLinkThickness?: CommonProps<Datum>["activeLinkThickness"];
    inactiveLinkThickness?: CommonProps<Datum>["inactiveLinkThickness"];
    linkColor?: CommonProps<Datum>["linkColor"];
    highlightAncestorLinks?: boolean;
    highlightDescendantLinks?: boolean;
}) => {
    nodes: ComputedNode<Datum>[];
    nodeByUid: Record<string, ComputedNode<Datum>>;
    links: ComputedLink<Datum>[];
    linkGenerator: import("d3-shape").Link<any, import("d3-shape").DefaultLinkObject, [number, number]>;
    setCurrentNode: (node: ComputedNode<Datum> | null) => void;
};
/**
 * This hook may generates mouse event handlers for a node according to the main chart props.
 * It's used for the default `Node` component and may be used for custom nodes
 * to simplify their implementation.
 */
export declare const useNodeMouseEventHandlers: <Datum>(node: ComputedNode<Datum>, { isInteractive, onMouseEnter, onMouseMove, onMouseLeave, onMouseDown, onMouseUp, onClick, onDoubleClick, setCurrentNode, tooltip, tooltipPosition, tooltipAnchor, margin, }: {
    isInteractive: boolean;
    onMouseEnter?: NodeMouseEventHandler<Datum>;
    onMouseMove?: NodeMouseEventHandler<Datum>;
    onMouseLeave?: NodeMouseEventHandler<Datum>;
    onMouseDown?: NodeMouseEventHandler<Datum>;
    onMouseUp?: NodeMouseEventHandler<Datum>;
    onClick?: NodeMouseEventHandler<Datum>;
    onDoubleClick?: NodeMouseEventHandler<Datum>;
    setCurrentNode: CurrentNodeSetter<Datum>;
    tooltip?: NodeTooltip<Datum>;
    tooltipPosition: TooltipPosition;
    tooltipAnchor: TooltipAnchor;
    margin: Margin;
}) => {
    onMouseEnter: ((event: MouseEvent) => void) | undefined;
    onMouseMove: ((event: MouseEvent) => void) | undefined;
    onMouseLeave: ((event: MouseEvent) => void) | undefined;
    onMouseDown: ((event: MouseEvent) => void) | undefined;
    onMouseUp: ((event: MouseEvent) => void) | undefined;
    onClick: ((event: MouseEvent) => void) | undefined;
    onDoubleClick: ((event: MouseEvent) => void) | undefined;
};
/**
 * This hook may generates mouse event handlers for a node according to the main chart props.
 * It's used for the default `Node` component and may be used for custom nodes
 * to simplify their implementation.
 */
export declare const useLinkMouseEventHandlers: <Datum>(link: ComputedLink<Datum>, { isInteractive, onMouseEnter, onMouseMove, onMouseLeave, onMouseDown, onMouseUp, onClick, onDoubleClick, tooltip, tooltipAnchor, }: {
    isInteractive: boolean;
    onMouseEnter?: LinkMouseEventHandler<Datum>;
    onMouseMove?: LinkMouseEventHandler<Datum>;
    onMouseLeave?: LinkMouseEventHandler<Datum>;
    onMouseDown?: LinkMouseEventHandler<Datum>;
    onMouseUp?: LinkMouseEventHandler<Datum>;
    onClick?: LinkMouseEventHandler<Datum>;
    onDoubleClick?: LinkMouseEventHandler<Datum>;
    tooltip?: LinkTooltip<Datum>;
    tooltipAnchor: TooltipAnchor;
}) => {
    onMouseEnter: ((event: MouseEvent) => void) | undefined;
    onMouseMove: ((event: MouseEvent) => void) | undefined;
    onMouseLeave: ((event: MouseEvent) => void) | undefined;
    onMouseDown: ((event: MouseEvent) => void) | undefined;
    onMouseUp: ((event: MouseEvent) => void) | undefined;
    onClick: ((event: MouseEvent) => void) | undefined;
    onDoubleClick: ((event: MouseEvent) => void) | undefined;
};
//# sourceMappingURL=hooks.d.ts.map