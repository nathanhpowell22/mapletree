{"version":3,"file":"nivo-treemap.mjs","sources":["../src/transitions.ts","../src/TreeMapNode.tsx","../src/TreeMapNodeTooltip.tsx","../src/TreeMapHtmlNode.tsx","../src/defaults.ts","../src/tiling.ts","../src/hooks.ts","../src/TreeMapNodes.tsx","../src/TreeMap.tsx","../src/ResponsiveTreeMap.tsx","../src/TreeMapHtml.tsx","../src/ResponsiveTreeMapHtml.tsx","../src/TreeMapCanvas.tsx","../src/ResponsiveTreeMapCanvas.tsx"],"sourcesContent":["import { to, SpringValue } from '@react-spring/web'\n\nexport const svgNodeTransform = (x: SpringValue<number>, y: SpringValue<number>) =>\n    to([x, y], (x, y) => `translate(${x},${y})`)\n\nexport const htmlNodeTransform = (x: SpringValue<number>, y: SpringValue<number>) =>\n    to([x, y], (x, y) => `translate(${x}px, ${y}px)`)\n\nexport const svgLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) => to([x, y, rotation], (x, y, rotation) => `translate(${x},${y}) rotate(${rotation})`)\n\nexport const htmlLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) => to([x, y, rotation], (x, y, rotation) => `translate(${x}px,${y}px) rotate(${rotation}deg)`)\n\nexport const htmlParentLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) =>\n    to(\n        [x, y, rotation],\n        (x, y, rotation) =>\n            `translate(${x - (rotation === 0 ? 0 : 5)}px,${\n                y - (rotation === 0 ? 5 : 0)\n            }px) rotate(${rotation}deg)`\n    )\n","import { memo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/theming'\nimport { Text } from '@nivo/text'\nimport { NodeProps } from './types'\nimport { svgNodeTransform, svgLabelTransform } from './transitions'\n\nconst NonMemoizedTreeMapNode = <Datum extends object>({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}: NodeProps<Datum>) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.g transform={svgNodeTransform(animatedProps.x, animatedProps.y)}>\n            <animated.rect\n                data-testid={`node.${node.id}`}\n                width={to(animatedProps.width, v => Math.max(v, 0))}\n                height={to(animatedProps.height, v => Math.max(v, 0))}\n                fill={node.fill ? node.fill : animatedProps.color}\n                strokeWidth={borderWidth}\n                stroke={node.borderColor}\n                fillOpacity={node.opacity}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <Text\n                    data-testid={`label.${node.id}`}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.labelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.labelOpacity}\n                    transform={svgLabelTransform(\n                        animatedProps.labelX,\n                        animatedProps.labelY,\n                        animatedProps.labelRotation\n                    )}\n                >\n                    {node.label}\n                </Text>\n            )}\n            {showParentLabel && (\n                <Text\n                    data-testid={`parentLabel.${node.id}`}\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.parentLabelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.parentLabelOpacity}\n                    transform={svgLabelTransform(\n                        animatedProps.parentLabelX,\n                        animatedProps.parentLabelY,\n                        animatedProps.parentLabelRotation\n                    )}\n                >\n                    {node.parentLabel}\n                </Text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const TreeMapNode = memo(NonMemoizedTreeMapNode) as typeof NonMemoizedTreeMapNode\n","import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { TooltipProps } from './types'\n\nconst NonMemoizedTreeMapNodeTooltip = <Datum extends object>({ node }: TooltipProps<Datum>) => (\n    <BasicTooltip id={node.id} value={node.formattedValue} enableChip={true} color={node.color} />\n)\n\nexport const TreeMapNodeTooltip = memo(\n    NonMemoizedTreeMapNodeTooltip\n) as typeof NonMemoizedTreeMapNodeTooltip\n","import { memo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/theming'\nimport { NodeProps } from './types'\nimport { htmlNodeTransform, htmlLabelTransform, htmlParentLabelTransform } from './transitions'\n\nconst NonMemoizedTreeMapHtmlNode = <Datum extends object>({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}: NodeProps<Datum>) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.div\n            data-testid={`node.${node.id}`}\n            id={node.path.replace(/[^\\w]/gi, '-')}\n            style={{\n                boxSizing: 'border-box',\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                transform: htmlNodeTransform(animatedProps.x, animatedProps.y),\n                width: animatedProps.width,\n                height: animatedProps.height,\n                borderWidth,\n                borderStyle: 'solid',\n                borderColor: node.borderColor,\n                overflow: 'hidden',\n            }}\n        >\n            <animated.div\n                style={{\n                    boxSizing: 'border-box',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    opacity: node.opacity,\n                    width: animatedProps.width,\n                    height: animatedProps.height,\n                    background: animatedProps.color,\n                }}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.span\n                    data-testid={`label.${node.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        top: -5,\n                        left: -5,\n                        width: 10,\n                        height: 10,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        color: node.labelTextColor,\n                        transformOrigin: 'center center',\n                        transform: htmlLabelTransform(\n                            animatedProps.labelX,\n                            animatedProps.labelY,\n                            animatedProps.labelRotation\n                        ),\n                        opacity: animatedProps.labelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.label}\n                </animated.span>\n            )}\n            {showParentLabel && (\n                <animated.span\n                    data-testid={`parentLabel.${node.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        width: 10,\n                        height: 10,\n                        color: node.parentLabelTextColor,\n                        transformOrigin: 'top left',\n                        transform: htmlParentLabelTransform(\n                            animatedProps.parentLabelX,\n                            animatedProps.parentLabelY,\n                            animatedProps.parentLabelRotation\n                        ),\n                        opacity: animatedProps.parentLabelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.parentLabel}\n                </animated.span>\n            )}\n        </animated.div>\n    )\n}\n\nexport const TreeMapHtmlNode = memo(NonMemoizedTreeMapHtmlNode) as typeof NonMemoizedTreeMapHtmlNode\n","import { TreeMapCommonProps, DefaultTreeMapDatum, LayerId } from './types'\nimport { TreeMapNode } from './TreeMapNode'\nimport { TreeMapNodeTooltip } from './TreeMapNodeTooltip'\nimport { TreeMapHtmlNode } from './TreeMapHtmlNode'\n\nexport const commonDefaultProps: Omit<\n    TreeMapCommonProps<DefaultTreeMapDatum>,\n    | 'valueFormat'\n    | 'margin'\n    | 'theme'\n    | 'labelFormat'\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['nodes'],\n\n    identity: 'id',\n    value: 'value',\n\n    tile: 'squarify',\n    leavesOnly: false,\n    innerPadding: 0,\n    outerPadding: 0,\n\n    colors: { scheme: 'nivo' as const },\n    colorBy: 'pathComponents.1',\n    nodeOpacity: 0.33,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipSize: 0,\n    labelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    orientLabel: true,\n\n    enableParentLabel: true,\n    parentLabel: 'id',\n    parentLabelSize: 20,\n    parentLabelPosition: 'top',\n    parentLabelPadding: 6,\n    parentLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    borderWidth: 1,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    isInteractive: true,\n    tooltip: TreeMapNodeTooltip,\n\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapNode,\n    defs: [],\n    fill: [],\n}\n\nexport const htmlDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapHtmlNode,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import {\n    treemapBinary,\n    treemapDice,\n    treemapSlice,\n    treemapSliceDice,\n    treemapSquarify,\n} from 'd3-hierarchy'\n\nexport const tileByType = {\n    binary: treemapBinary,\n    dice: treemapDice,\n    slice: treemapSlice,\n    sliceDice: treemapSliceDice,\n    squarify: treemapSquarify,\n} as const\n\nexport type TileType = keyof typeof tileByType\n","import { createElement, useCallback, useMemo, MouseEvent } from 'react'\nimport omit from 'lodash/omit.js'\nimport cloneDeep from 'lodash/cloneDeep.js'\nimport startCase from 'lodash/startCase.js'\nimport {\n    treemap as d3Treemap,\n    hierarchy,\n    HierarchyNode,\n    HierarchyRectangularNode,\n} from 'd3-hierarchy'\nimport { useValueFormatter, PropertyAccessor, usePropertyAccessor } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { commonDefaultProps } from './defaults'\nimport {\n    DefaultTreeMapDatum,\n    TreeMapCommonProps,\n    TreeMapDataProps,\n    ComputedNode,\n    ComputedNodeWithoutStyles,\n    ComputedNodeWithHandlers,\n    CustomLayerProps,\n} from './types'\nimport { tileByType } from './tiling'\n\nexport const useTreeMapLayout = <Datum extends object>({\n    width,\n    height,\n    tile,\n    innerPadding,\n    outerPadding,\n    enableParentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    leavesOnly,\n}: {\n    width: number\n    height: number\n    tile: TreeMapCommonProps<Datum>['tile']\n    innerPadding: TreeMapCommonProps<Datum>['innerPadding']\n    outerPadding: TreeMapCommonProps<Datum>['outerPadding']\n    enableParentLabel: TreeMapCommonProps<Datum>['enableParentLabel']\n    parentLabelSize: TreeMapCommonProps<Datum>['parentLabelSize']\n    parentLabelPosition: TreeMapCommonProps<Datum>['parentLabelPosition']\n    leavesOnly: TreeMapCommonProps<Datum>['leavesOnly']\n}) =>\n    useMemo(() => {\n        const treemap = d3Treemap<Datum>()\n            .size([width, height])\n            .tile(tileByType[tile])\n            .round(true)\n            .paddingInner(innerPadding)\n            .paddingOuter(outerPadding)\n\n        if (enableParentLabel && !leavesOnly) {\n            const parentLabelPadding = parentLabelSize + outerPadding * 2\n            // @ts-expect-error dynamic function call\n            treemap[`padding${startCase(parentLabelPosition)}`](parentLabelPadding)\n        }\n\n        return treemap\n    }, [\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    ])\n\nexport const useHierarchy = <Datum extends object>({\n    root,\n    getValue,\n}: {\n    root: Datum\n    getValue: (datum: Datum) => number\n}) => useMemo(() => hierarchy<Datum>(root).sum(getValue), [root, getValue])\n\nconst computeNodeIdAndPath = <Datum extends object>(\n    node: HierarchyNode<Datum>,\n    getIdentity: (node: Datum) => string\n) => {\n    const path = node\n        .ancestors()\n        .map(ancestor => getIdentity(ancestor.data))\n        .reverse()\n\n    return { path: path.join('.'), pathComponents: path }\n}\n\nexport const useTreeMap = <Datum extends object = DefaultTreeMapDatum>({\n    data,\n    width,\n    height,\n    identity = commonDefaultProps.identity as PropertyAccessor<Datum, string>,\n    value = commonDefaultProps.value as PropertyAccessor<Datum, number>,\n    valueFormat,\n    leavesOnly = commonDefaultProps.leavesOnly,\n    tile = commonDefaultProps.tile,\n    innerPadding = commonDefaultProps.innerPadding,\n    outerPadding = commonDefaultProps.outerPadding,\n    label = commonDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    orientLabel = commonDefaultProps.orientLabel,\n    enableParentLabel = commonDefaultProps.enableParentLabel,\n    parentLabel = commonDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = commonDefaultProps.parentLabelSize,\n    parentLabelPosition = commonDefaultProps.parentLabelPosition,\n    parentLabelPadding = commonDefaultProps.parentLabelPadding,\n    colors = commonDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = commonDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = commonDefaultProps.nodeOpacity,\n    borderColor = commonDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    labelTextColor = commonDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    parentLabelTextColor = commonDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n}: {\n    data: TreeMapDataProps<Datum>['data']\n    width: number\n    height: number\n    identity?: TreeMapCommonProps<Datum>['identity']\n    value?: TreeMapCommonProps<Datum>['value']\n    valueFormat?: TreeMapCommonProps<Datum>['valueFormat']\n    tile?: TreeMapCommonProps<Datum>['tile']\n    leavesOnly?: TreeMapCommonProps<Datum>['leavesOnly']\n    innerPadding?: TreeMapCommonProps<Datum>['innerPadding']\n    outerPadding?: TreeMapCommonProps<Datum>['outerPadding']\n    label?: TreeMapCommonProps<Datum>['label']\n    orientLabel?: TreeMapCommonProps<Datum>['orientLabel']\n    enableParentLabel?: TreeMapCommonProps<Datum>['enableParentLabel']\n    parentLabel?: TreeMapCommonProps<Datum>['parentLabel']\n    parentLabelSize?: TreeMapCommonProps<Datum>['parentLabelSize']\n    parentLabelPosition?: TreeMapCommonProps<Datum>['parentLabelPosition']\n    parentLabelPadding?: TreeMapCommonProps<Datum>['parentLabelPadding']\n    colors?: TreeMapCommonProps<Datum>['colors']\n    colorBy?: TreeMapCommonProps<Datum>['colorBy']\n    nodeOpacity?: TreeMapCommonProps<Datum>['nodeOpacity']\n    borderColor?: TreeMapCommonProps<Datum>['borderColor']\n    labelTextColor?: TreeMapCommonProps<Datum>['labelTextColor']\n    parentLabelTextColor?: TreeMapCommonProps<Datum>['parentLabelTextColor']\n}) => {\n    const getIdentity = usePropertyAccessor(identity)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = usePropertyAccessor(label)\n    const getParentLabel = usePropertyAccessor(parentLabel)\n\n    const layout = useTreeMapLayout<Datum>({\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    })\n\n    const hierarchy = useHierarchy<Datum>({ root: data, getValue })\n\n    const rawNodes = useMemo(() => {\n        // d3 treemap mutates the data, so we need to copy it\n        // to have proper behavior for subsequents useMemo()\n        const root = cloneDeep(hierarchy)\n        layout(root)\n\n        return (\n            leavesOnly ? root.leaves() : root.descendants()\n        ) as HierarchyRectangularNode<Datum>[]\n    }, [hierarchy, layout, leavesOnly])\n\n    const nodes = useMemo(\n        () =>\n            rawNodes.map(rawNode => {\n                const { path, pathComponents } = computeNodeIdAndPath(rawNode, getIdentity)\n\n                const node = {\n                    id: getIdentity(rawNode.data),\n                    path,\n                    pathComponents,\n                    data: omit(rawNode.data, 'children'),\n                    x: rawNode.x0,\n                    y: rawNode.y0,\n                    width: rawNode.x1 - rawNode.x0,\n                    height: rawNode.y1 - rawNode.y0,\n                    value: rawNode.value!,\n                    formattedValue: formatValue(rawNode.value!),\n                    treeDepth: rawNode.depth,\n                    treeHeight: rawNode.height,\n                    isParent: rawNode.height > 0,\n                    isLeaf: rawNode.height === 0,\n                    parentLabelX: 0,\n                    parentLabelY: 0,\n                    parentLabelRotation: 0,\n                } as ComputedNodeWithoutStyles<Datum>\n\n                node.labelRotation = orientLabel && node.height > node.width ? -90 : 0\n\n                if (parentLabelPosition === 'top') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = outerPadding + parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'right') {\n                    node.parentLabelX = node.width - outerPadding - parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n                if (parentLabelPosition === 'bottom') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = node.height - outerPadding - parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'left') {\n                    node.parentLabelX = outerPadding + parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n\n                node.label = getLabel(node)\n                node.parentLabel = getParentLabel(node)\n\n                return node\n            }),\n        [\n            rawNodes,\n            getIdentity,\n            formatValue,\n            getLabel,\n            orientLabel,\n            getParentLabel,\n            parentLabelSize,\n            parentLabelPosition,\n            parentLabelPadding,\n            outerPadding,\n        ]\n    )\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getParentLabelTextColor = useInheritedColor(parentLabelTextColor, theme)\n\n    const nodesWithStyles = useMemo(\n        () =>\n            nodes.map(node => {\n                const nodeWithStyles = {\n                    ...node,\n                    color: getColor(node),\n                    opacity: nodeOpacity,\n                } as ComputedNode<Datum>\n\n                nodeWithStyles.borderColor = getBorderColor(nodeWithStyles)\n                nodeWithStyles.labelTextColor = getLabelTextColor(nodeWithStyles)\n                nodeWithStyles.parentLabelTextColor = getParentLabelTextColor(nodeWithStyles)\n\n                return nodeWithStyles\n            }),\n        [nodes, getColor, nodeOpacity, getBorderColor, getLabelTextColor, getParentLabelTextColor]\n    )\n\n    return {\n        hierarchy,\n        nodes: nodesWithStyles,\n        layout,\n    }\n}\n\nexport const useInteractiveTreeMapNodes = <Datum extends object>(\n    nodes: ComputedNode<Datum>[],\n    {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: {\n        isInteractive: TreeMapCommonProps<Datum>['isInteractive']\n        onMouseEnter?: TreeMapCommonProps<Datum>['onMouseEnter']\n        onMouseMove?: TreeMapCommonProps<Datum>['onMouseMove']\n        onMouseLeave?: TreeMapCommonProps<Datum>['onMouseLeave']\n        onClick?: TreeMapCommonProps<Datum>['onClick']\n        tooltip: TreeMapCommonProps<Datum>['tooltip']\n    }\n): ComputedNodeWithHandlers<Datum>[] => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseEnter = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            showTooltip(node, event)\n            onMouseEnter?.(node, event)\n        },\n        [onMouseEnter, showTooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            showTooltip(node, event)\n            onMouseMove?.(node, event)\n        },\n        [onMouseMove, showTooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [onMouseLeave, hideTooltip]\n    )\n\n    const handleClick = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        },\n        [onClick]\n    )\n\n    return useMemo(\n        () =>\n            nodes.map(node => {\n                if (!isInteractive) return node\n\n                return {\n                    ...node,\n                    onMouseEnter: (event: MouseEvent) => handleMouseEnter(node, event),\n                    onMouseMove: (event: MouseEvent) => handleMouseMove(node, event),\n                    onMouseLeave: (event: MouseEvent) => handleMouseLeave(node, event),\n                    onClick: (event: MouseEvent) => handleClick(node, event),\n                }\n            }),\n        [isInteractive, nodes, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useCustomLayerProps = <Datum extends object>({\n    nodes,\n}: CustomLayerProps<Datum>): CustomLayerProps<Datum> =>\n    useMemo(\n        () => ({\n            nodes,\n        }),\n        [nodes]\n    )\n","import { createElement, memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useInteractiveTreeMapNodes } from './hooks'\nimport {\n    ComputedNode,\n    TreeMapCommonProps,\n    NodeAnimatedProps,\n    NodeComponent,\n    ComputedNodeWithHandlers,\n} from './types'\n\nconst getAnimatedNodeProps = <Datum extends object>(\n    node: ComputedNodeWithHandlers<Datum>\n): NodeAnimatedProps => ({\n    x: node.x,\n    y: node.y,\n    width: node.width,\n    height: node.height,\n    color: node.color,\n    labelX: node.width / 2,\n    labelY: node.height / 2,\n    labelRotation: node.labelRotation,\n    labelOpacity: 1,\n    parentLabelX: node.parentLabelX,\n    parentLabelY: node.parentLabelY,\n    parentLabelRotation: node.parentLabelRotation,\n    parentLabelOpacity: 1,\n})\n\nconst getEndingAnimatedNodeProps = <Datum extends object>(\n    node: ComputedNodeWithHandlers<Datum>\n): NodeAnimatedProps => {\n    const x = node.x + node.width / 2\n    const y = node.y + node.height / 2\n\n    return {\n        x,\n        y,\n        width: 0,\n        height: 0,\n        color: node.color,\n        labelX: 0,\n        labelY: 0,\n        labelRotation: node.labelRotation,\n        labelOpacity: 0,\n        parentLabelX: 0,\n        parentLabelY: 0,\n        parentLabelRotation: node.parentLabelRotation,\n        parentLabelOpacity: 0,\n    }\n}\n\ninterface TreeMapNodesProps<Datum extends object> {\n    nodes: ComputedNode<Datum>[]\n    nodeComponent: NodeComponent<Datum>\n    borderWidth: TreeMapCommonProps<Datum>['borderWidth']\n    enableLabel: TreeMapCommonProps<Datum>['enableLabel']\n    labelSkipSize: TreeMapCommonProps<Datum>['labelSkipSize']\n    enableParentLabel: TreeMapCommonProps<Datum>['enableParentLabel']\n    isInteractive: TreeMapCommonProps<Datum>['isInteractive']\n    onMouseEnter?: TreeMapCommonProps<Datum>['onMouseEnter']\n    onMouseMove?: TreeMapCommonProps<Datum>['onMouseMove']\n    onMouseLeave?: TreeMapCommonProps<Datum>['onMouseLeave']\n    onClick?: TreeMapCommonProps<Datum>['onClick']\n    tooltip: TreeMapCommonProps<Datum>['tooltip']\n}\n\nconst NonMemoizedTreeMapNodes = <Datum extends object>({\n    nodes,\n    nodeComponent,\n    borderWidth,\n    enableLabel,\n    labelSkipSize,\n    enableParentLabel,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: TreeMapNodesProps<Datum>) => {\n    const nodesWithHandlers = useInteractiveTreeMapNodes<Datum>(nodes, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<ComputedNodeWithHandlers<Datum>, NodeAnimatedProps>(\n        nodesWithHandlers,\n        {\n            keys: node => node.path,\n            initial: getAnimatedNodeProps,\n            from: getEndingAnimatedNodeProps,\n            enter: getAnimatedNodeProps,\n            update: getAnimatedNodeProps,\n            leave: getEndingAnimatedNodeProps,\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <>\n            {transition((animatedProps, node) =>\n                createElement(nodeComponent, {\n                    key: node.path,\n                    node,\n                    animatedProps,\n                    borderWidth,\n                    enableLabel,\n                    labelSkipSize,\n                    enableParentLabel,\n                })\n            )}\n        </>\n    )\n}\n\nexport const TreeMapNodes = memo(NonMemoizedTreeMapNodes) as typeof NonMemoizedTreeMapNodes\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    SvgWrapper,\n    Container,\n    useDimensions,\n    // @ts-expect-error no types\n    bindDefs,\n} from '@nivo/core'\nimport { useTreeMap, useCustomLayerProps } from './hooks'\nimport { TreeMapNodes } from './TreeMapNodes'\nimport {\n    DefaultTreeMapDatum,\n    NodeComponent,\n    TreeMapCommonProps,\n    TreeMapSvgProps,\n    LayerId,\n} from './types'\nimport { svgDefaultProps } from './defaults'\n\ntype InnerTreeMapProps<Datum extends object> = Omit<\n    TreeMapSvgProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMap = <Datum extends object>({\n    data,\n    identity = svgDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = svgDefaultProps.value as TreeMapCommonProps<Datum>['value'],\n    valueFormat,\n    tile = svgDefaultProps.tile,\n    nodeComponent = svgDefaultProps.nodeComponent as NodeComponent<Datum>,\n    innerPadding = svgDefaultProps.innerPadding,\n    outerPadding = svgDefaultProps.outerPadding,\n    leavesOnly = svgDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers as NonNullable<TreeMapSvgProps<Datum>['layers']>,\n    colors = svgDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = svgDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = svgDefaultProps.nodeOpacity,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    enableLabel = svgDefaultProps.enableLabel,\n    label = svgDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = svgDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = svgDefaultProps.orientLabel,\n    labelSkipSize = svgDefaultProps.labelSkipSize,\n    enableParentLabel = svgDefaultProps.enableParentLabel,\n    parentLabel = svgDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = svgDefaultProps.parentLabelSize,\n    parentLabelPosition = svgDefaultProps.parentLabelPosition,\n    parentLabelPadding = svgDefaultProps.parentLabelPadding,\n    parentLabelTextColor = svgDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n    isInteractive = svgDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapProps<Datum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        nodes: null,\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <TreeMapNodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    const customLayerProps = useCustomLayerProps<Datum>({ nodes })\n\n    const boundDefs = bindDefs(defs, nodes, fill)\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const TreeMap = <Datum extends object = DefaultTreeMapDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeMapSvgProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeMap<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapSvgProps } from './types'\nimport { TreeMap } from './TreeMap'\n\nexport const ResponsiveTreeMap = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapSvgProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMap<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions } from '@nivo/core'\nimport { useCustomLayerProps, useTreeMap } from './hooks'\nimport { TreeMapNodes } from './TreeMapNodes'\nimport { DefaultTreeMapDatum, TreeMapCommonProps, TreeMapHtmlProps, LayerId } from './types'\nimport { htmlDefaultProps, svgDefaultProps } from './defaults'\n\ntype InnerTreeMapHtmlProps<Datum extends object> = Omit<\n    TreeMapHtmlProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMapHtml = <Datum extends object>({\n    data,\n    identity = htmlDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = htmlDefaultProps.value as TreeMapCommonProps<Datum>['value'],\n    tile = htmlDefaultProps.tile,\n    nodeComponent = htmlDefaultProps.nodeComponent,\n    valueFormat,\n    innerPadding = htmlDefaultProps.innerPadding,\n    outerPadding = htmlDefaultProps.outerPadding,\n    leavesOnly = htmlDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers as NonNullable<TreeMapHtmlProps<Datum>['layers']>,\n    colors = htmlDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = htmlDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = htmlDefaultProps.nodeOpacity,\n    borderWidth = htmlDefaultProps.borderWidth,\n    borderColor = htmlDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    enableLabel = htmlDefaultProps.enableLabel,\n    label = htmlDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = htmlDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = htmlDefaultProps.orientLabel,\n    labelSkipSize = htmlDefaultProps.labelSkipSize,\n    enableParentLabel = htmlDefaultProps.enableParentLabel,\n    parentLabel = htmlDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = htmlDefaultProps.parentLabelSize,\n    parentLabelPosition = htmlDefaultProps.parentLabelPosition,\n    parentLabelPadding = htmlDefaultProps.parentLabelPadding,\n    parentLabelTextColor = htmlDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n    isInteractive = htmlDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = htmlDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapHtmlProps<Datum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        nodes: null,\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <TreeMapNodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    const customLayerProps = useCustomLayerProps<Datum>({ nodes })\n\n    return (\n        <div\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n            style={{\n                position: 'relative',\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        >\n            <div style={{ position: 'absolute', top: margin.top, left: margin.left }}>\n                {layers.map((layer, i) => {\n                    if (typeof layer === 'function') {\n                        return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                    }\n\n                    return layerById?.[layer] ?? null\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport const TreeMapHtml = <Datum extends object = DefaultTreeMapDatum>({\n    isInteractive = htmlDefaultProps.isInteractive,\n    animate = htmlDefaultProps.animate,\n    motionConfig = htmlDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeMapHtmlProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeMapHtml<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapHtmlProps } from './types'\nimport { TreeMapHtml } from './TreeMapHtml'\n\nexport const ResponsiveTreeMapHtml = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapHtmlProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapHtml<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { createElement, useCallback, useEffect, useRef, MouseEvent } from 'react'\nimport {\n    degreesToRadians,\n    getRelativeCursor,\n    isCursorInRect,\n    Container,\n    useDimensions,\n    Margin,\n} from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { useTooltip } from '@nivo/tooltip'\nimport { setCanvasFont, drawCanvasText } from '@nivo/text'\nimport { useTreeMap } from './hooks'\nimport { ComputedNode, DefaultTreeMapDatum, TreeMapCanvasProps, TreeMapCommonProps } from './types'\nimport { canvasDefaultProps } from './defaults'\n\nconst findNodeUnderCursor = <Datum extends object>(\n    nodes: ComputedNode<Datum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\ntype InnerTreeMapCanvasProps<Datum extends object> = Omit<\n    TreeMapCanvasProps<Datum>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMapCanvas = <Datum extends object>({\n    data,\n    identity = canvasDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = canvasDefaultProps.identity as TreeMapCommonProps<Datum>['value'],\n    tile = canvasDefaultProps.tile,\n    valueFormat,\n    innerPadding = canvasDefaultProps.innerPadding,\n    outerPadding = canvasDefaultProps.outerPadding,\n    leavesOnly = canvasDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors = canvasDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = canvasDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = canvasDefaultProps.nodeOpacity,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor = canvasDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    enableLabel = canvasDefaultProps.enableLabel,\n    label = canvasDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = canvasDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = canvasDefaultProps.orientLabel,\n    labelSkipSize = canvasDefaultProps.labelSkipSize,\n    isInteractive = canvasDefaultProps.isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapCanvasProps<Datum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel: false,\n    })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        const ctx = canvasEl.current.getContext('2d')\n        if (ctx === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        nodes.forEach(node => {\n            ctx.fillStyle = node.color\n            ctx.fillRect(node.x, node.y, node.width, node.height)\n\n            if (borderWidth > 0) {\n                ctx.strokeStyle = node.borderColor\n                ctx.lineWidth = borderWidth\n                ctx.strokeRect(node.x, node.y, node.width, node.height)\n            }\n        })\n\n        if (enableLabel) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            setCanvasFont(ctx, theme.labels.text)\n\n            nodes.forEach(node => {\n                const showLabel =\n                    node.isLeaf &&\n                    (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n                if (!showLabel) return\n\n                const rotate = orientLabel && node.height > node.width\n\n                ctx.save()\n                ctx.translate(node.x + node.width / 2, node.y + node.height / 2)\n                ctx.rotate(degreesToRadians(rotate ? -90 : 0))\n\n                drawCanvasText(\n                    ctx,\n                    {\n                        ...theme.labels.text,\n                        fill: node.labelTextColor,\n                    },\n                    String(node.label)\n                )\n\n                ctx.restore()\n            })\n        }\n    }, [\n        canvasEl,\n        nodes,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        borderWidth,\n        enableLabel,\n        orientLabel,\n        labelSkipSize,\n        theme,\n        pixelRatio,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node !== undefined) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n                onMouseMove?.(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [canvasEl, nodes, margin, showTooltipFromEvent, hideTooltip, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node === undefined) return\n\n            onClick?.(node, event)\n        },\n        [canvasEl, nodes, margin, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const TreeMapCanvas = <Datum extends object = DefaultTreeMapDatum>({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: TreeMapCanvasProps<Datum>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerTreeMapCanvas<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapCanvasProps } from './types'\nimport { TreeMapCanvas } from './TreeMapCanvas'\n\nexport const ResponsiveTreeMapCanvas = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapCanvasProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapCanvas<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["svgNodeTransform","x","y","to","htmlNodeTransform","svgLabelTransform","rotation","htmlLabelTransform","htmlParentLabelTransform","TreeMapNode","memo","_ref","node","animatedProps","borderWidth","enableLabel","enableParentLabel","labelSkipSize","theme","useTheme","showLabel","isLeaf","Math","min","width","height","showParentLabel","isParent","_jsxs","animated","g","transform","children","_jsx","rect","id","v","max","fill","color","strokeWidth","stroke","borderColor","fillOpacity","opacity","onMouseEnter","onMouseMove","onMouseLeave","onClick","Text","textAnchor","dominantBaseline","style","_extends","labels","text","labelTextColor","pointerEvents","labelOpacity","labelX","labelY","labelRotation","label","parentLabelTextColor","parentLabelOpacity","parentLabelX","parentLabelY","parentLabelRotation","parentLabel","TreeMapNodeTooltip","BasicTooltip","value","formattedValue","enableChip","TreeMapHtmlNode","div","path","replace","boxSizing","position","top","left","borderStyle","overflow","background","span","display","justifyContent","alignItems","whiteSpace","transformOrigin","commonDefaultProps","layers","identity","tile","leavesOnly","innerPadding","outerPadding","colors","scheme","colorBy","nodeOpacity","from","modifiers","orientLabel","parentLabelSize","parentLabelPosition","parentLabelPadding","isInteractive","tooltip","role","animate","motionConfig","svgDefaultProps","nodeComponent","defs","htmlDefaultProps","canvasDefaultProps","pixelRatio","window","devicePixelRatio","tileByType","binary","treemapBinary","dice","treemapDice","slice","treemapSlice","sliceDice","treemapSliceDice","squarify","treemapSquarify","useHierarchy","_ref2","root","getValue","useMemo","hierarchy","sum","useTreeMap","_ref3","data","_ref3$identity","_ref3$value","valueFormat","_ref3$leavesOnly","_ref3$tile","_ref3$innerPadding","_ref3$outerPadding","_ref3$label","_ref3$orientLabel","_ref3$enableParentLab","_ref3$parentLabel","_ref3$parentLabelSize","_ref3$parentLabelPosi","_ref3$parentLabelPadd","_ref3$colors","_ref3$colorBy","_ref3$nodeOpacity","_ref3$borderColor","_ref3$labelTextColor","_ref3$parentLabelText","getIdentity","usePropertyAccessor","formatValue","useValueFormatter","getLabel","getParentLabel","layout","treemap","d3Treemap","size","round","paddingInner","paddingOuter","startCase","useTreeMapLayout","rawNodes","cloneDeep","leaves","descendants","nodes","map","rawNode","_computeNodeIdAndPath","ancestors","ancestor","reverse","join","pathComponents","computeNodeIdAndPath","omit","x0","y0","x1","y1","treeDepth","depth","treeHeight","getColor","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelTextColor","getParentLabelTextColor","nodesWithStyles","nodeWithStyles","useCustomLayerProps","_ref5","getAnimatedNodeProps","getEndingAnimatedNodeProps","TreeMapNodes","nodesWithHandlers","_ref4","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","event","createElement","handleMouseEnter","handleMouseMove","handleMouseLeave","handleClick","useInteractiveTreeMapNodes","_useMotionConfig","useMotionConfig","springConfig","config","transition","useTransition","keys","initial","enter","update","leave","immediate","_Fragment","key","InnerTreeMap","_ref$identity","_ref$value","_ref$tile","_ref$nodeComponent","_ref$innerPadding","_ref$outerPadding","_ref$leavesOnly","partialMargin","margin","_ref$layers","_ref$colors","_ref$colorBy","_ref$nodeOpacity","_ref$borderWidth","_ref$borderColor","_ref$defs","_ref$fill","_ref$enableLabel","_ref$label","_ref$labelTextColor","_ref$orientLabel","_ref$labelSkipSize","_ref$enableParentLabe","_ref$parentLabel","_ref$parentLabelSize","_ref$parentLabelPosit","_ref$parentLabelPaddi","_ref$parentLabelTextC","_ref$isInteractive","_ref$tooltip","ariaLabel","ariaLabelledBy","ariaDescribedBy","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","layerById","includes","customLayerProps","boundDefs","bindDefs","SvgWrapper","layer","i","_layerById$layer","Fragment","TreeMap","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","ResponsiveTreeMap","props","ResponsiveWrapper","InnerTreeMapHtml","TreeMapHtml","ResponsiveTreeMapHtml","findNodeUnderCursor","find","isCursorInRect","InnerTreeMapCanvas","_ref$pixelRatio","canvasEl","useRef","useEffect","current","ctx","getContext","scale","fillStyle","fillRect","translate","forEach","strokeStyle","lineWidth","strokeRect","textAlign","textBaseline","setCanvasFont","rotate","save","degreesToRadians","drawCanvasText","String","restore","handleMouseHover","_getRelativeCursor","getRelativeCursor","undefined","_getRelativeCursor2","ref","TreeMapCanvas","ResponsiveTreeMapCanvas"],"mappings":"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"}