import { HierarchyNode } from 'd3-hierarchy';
import { DefaultTreeMapDatum, TreeMapCommonProps, TreeMapDataProps, ComputedNode, ComputedNodeWithHandlers, CustomLayerProps } from './types';
export declare const useTreeMapLayout: <Datum extends object>({ width, height, tile, innerPadding, outerPadding, enableParentLabel, parentLabelSize, parentLabelPosition, leavesOnly, }: {
    width: number;
    height: number;
    tile: TreeMapCommonProps<Datum>["tile"];
    innerPadding: TreeMapCommonProps<Datum>["innerPadding"];
    outerPadding: TreeMapCommonProps<Datum>["outerPadding"];
    enableParentLabel: TreeMapCommonProps<Datum>["enableParentLabel"];
    parentLabelSize: TreeMapCommonProps<Datum>["parentLabelSize"];
    parentLabelPosition: TreeMapCommonProps<Datum>["parentLabelPosition"];
    leavesOnly: TreeMapCommonProps<Datum>["leavesOnly"];
}) => import("d3-hierarchy").TreemapLayout<Datum>;
export declare const useHierarchy: <Datum extends object>({ root, getValue, }: {
    root: Datum;
    getValue: (datum: Datum) => number;
}) => HierarchyNode<Datum>;
export declare const useTreeMap: <Datum extends object = DefaultTreeMapDatum>({ data, width, height, identity, value, valueFormat, leavesOnly, tile, innerPadding, outerPadding, label, orientLabel, enableParentLabel, parentLabel, parentLabelSize, parentLabelPosition, parentLabelPadding, colors, colorBy, nodeOpacity, borderColor, labelTextColor, parentLabelTextColor, }: {
    data: TreeMapDataProps<Datum>["data"];
    width: number;
    height: number;
    identity?: TreeMapCommonProps<Datum>["identity"];
    value?: TreeMapCommonProps<Datum>["value"];
    valueFormat?: TreeMapCommonProps<Datum>["valueFormat"];
    tile?: TreeMapCommonProps<Datum>["tile"];
    leavesOnly?: TreeMapCommonProps<Datum>["leavesOnly"];
    innerPadding?: TreeMapCommonProps<Datum>["innerPadding"];
    outerPadding?: TreeMapCommonProps<Datum>["outerPadding"];
    label?: TreeMapCommonProps<Datum>["label"];
    orientLabel?: TreeMapCommonProps<Datum>["orientLabel"];
    enableParentLabel?: TreeMapCommonProps<Datum>["enableParentLabel"];
    parentLabel?: TreeMapCommonProps<Datum>["parentLabel"];
    parentLabelSize?: TreeMapCommonProps<Datum>["parentLabelSize"];
    parentLabelPosition?: TreeMapCommonProps<Datum>["parentLabelPosition"];
    parentLabelPadding?: TreeMapCommonProps<Datum>["parentLabelPadding"];
    colors?: TreeMapCommonProps<Datum>["colors"];
    colorBy?: TreeMapCommonProps<Datum>["colorBy"];
    nodeOpacity?: TreeMapCommonProps<Datum>["nodeOpacity"];
    borderColor?: TreeMapCommonProps<Datum>["borderColor"];
    labelTextColor?: TreeMapCommonProps<Datum>["labelTextColor"];
    parentLabelTextColor?: TreeMapCommonProps<Datum>["parentLabelTextColor"];
}) => {
    hierarchy: HierarchyNode<Datum>;
    nodes: ComputedNode<Datum>[];
    layout: import("d3-hierarchy").TreemapLayout<Datum>;
};
export declare const useInteractiveTreeMapNodes: <Datum extends object>(nodes: ComputedNode<Datum>[], { isInteractive, onMouseEnter, onMouseMove, onMouseLeave, onClick, tooltip, }: {
    isInteractive: TreeMapCommonProps<Datum>["isInteractive"];
    onMouseEnter?: TreeMapCommonProps<Datum>["onMouseEnter"];
    onMouseMove?: TreeMapCommonProps<Datum>["onMouseMove"];
    onMouseLeave?: TreeMapCommonProps<Datum>["onMouseLeave"];
    onClick?: TreeMapCommonProps<Datum>["onClick"];
    tooltip: TreeMapCommonProps<Datum>["tooltip"];
}) => ComputedNodeWithHandlers<Datum>[];
export declare const useCustomLayerProps: <Datum extends object>({ nodes, }: CustomLayerProps<Datum>) => CustomLayerProps<Datum>;
//# sourceMappingURL=hooks.d.ts.map